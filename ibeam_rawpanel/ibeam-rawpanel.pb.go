// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.14.0
// source: ibeam-rawpanel.proto

package ibeam_rawpanel

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InboundMessage_FlowMsg int32

const (
	InboundMessage_NONE InboundMessage_FlowMsg = 0
	InboundMessage_PING InboundMessage_FlowMsg = 1 // "ping",
	InboundMessage_ACK  InboundMessage_FlowMsg = 2 // "ack",
	InboundMessage_NACK InboundMessage_FlowMsg = 3 // "nack",
)

// Enum value maps for InboundMessage_FlowMsg.
var (
	InboundMessage_FlowMsg_name = map[int32]string{
		0: "NONE",
		1: "PING",
		2: "ACK",
		3: "NACK",
	}
	InboundMessage_FlowMsg_value = map[string]int32{
		"NONE": 0,
		"PING": 1,
		"ACK":  2,
		"NACK": 3,
	}
)

func (x InboundMessage_FlowMsg) Enum() *InboundMessage_FlowMsg {
	p := new(InboundMessage_FlowMsg)
	*p = x
	return p
}

func (x InboundMessage_FlowMsg) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InboundMessage_FlowMsg) Descriptor() protoreflect.EnumDescriptor {
	return file_ibeam_rawpanel_proto_enumTypes[0].Descriptor()
}

func (InboundMessage_FlowMsg) Type() protoreflect.EnumType {
	return &file_ibeam_rawpanel_proto_enumTypes[0]
}

func (x InboundMessage_FlowMsg) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InboundMessage_FlowMsg.Descriptor instead.
func (InboundMessage_FlowMsg) EnumDescriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{0, 0}
}

type LoadCPU_LevelE int32

const (
	LoadCPU_OFF       LoadCPU_LevelE = 0
	LoadCPU_ON_1CORE  LoadCPU_LevelE = 1
	LoadCPU_ON_2CORES LoadCPU_LevelE = 2
	LoadCPU_ON_3CORES LoadCPU_LevelE = 3
	LoadCPU_ON_4CORES LoadCPU_LevelE = 4
)

// Enum value maps for LoadCPU_LevelE.
var (
	LoadCPU_LevelE_name = map[int32]string{
		0: "OFF",
		1: "ON_1CORE",
		2: "ON_2CORES",
		3: "ON_3CORES",
		4: "ON_4CORES",
	}
	LoadCPU_LevelE_value = map[string]int32{
		"OFF":       0,
		"ON_1CORE":  1,
		"ON_2CORES": 2,
		"ON_3CORES": 3,
		"ON_4CORES": 4,
	}
)

func (x LoadCPU_LevelE) Enum() *LoadCPU_LevelE {
	p := new(LoadCPU_LevelE)
	*p = x
	return p
}

func (x LoadCPU_LevelE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoadCPU_LevelE) Descriptor() protoreflect.EnumDescriptor {
	return file_ibeam_rawpanel_proto_enumTypes[1].Descriptor()
}

func (LoadCPU_LevelE) Type() protoreflect.EnumType {
	return &file_ibeam_rawpanel_proto_enumTypes[1]
}

func (x LoadCPU_LevelE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoadCPU_LevelE.Descriptor instead.
func (LoadCPU_LevelE) EnumDescriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{6, 0}
}

type HWCMode_StateE int32

const (
	HWCMode_OFF       HWCMode_StateE = 0
	HWCMode_ON_YELLOW HWCMode_StateE = 1 // Legacy support
	HWCMode_ON_RED    HWCMode_StateE = 2 // Legacy support
	HWCMode_ON_GREEN  HWCMode_StateE = 3 // Legacy support
	HWCMode_ON        HWCMode_StateE = 4
	HWCMode_DIMMED    HWCMode_StateE = 5
)

// Enum value maps for HWCMode_StateE.
var (
	HWCMode_StateE_name = map[int32]string{
		0: "OFF",
		1: "ON_YELLOW",
		2: "ON_RED",
		3: "ON_GREEN",
		4: "ON",
		5: "DIMMED",
	}
	HWCMode_StateE_value = map[string]int32{
		"OFF":       0,
		"ON_YELLOW": 1,
		"ON_RED":    2,
		"ON_GREEN":  3,
		"ON":        4,
		"DIMMED":    5,
	}
)

func (x HWCMode_StateE) Enum() *HWCMode_StateE {
	p := new(HWCMode_StateE)
	*p = x
	return p
}

func (x HWCMode_StateE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HWCMode_StateE) Descriptor() protoreflect.EnumDescriptor {
	return file_ibeam_rawpanel_proto_enumTypes[2].Descriptor()
}

func (HWCMode_StateE) Type() protoreflect.EnumType {
	return &file_ibeam_rawpanel_proto_enumTypes[2]
}

func (x HWCMode_StateE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HWCMode_StateE.Descriptor instead.
func (HWCMode_StateE) EnumDescriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{9, 0}
}

type HWCExtended_InterpretationE int32

const (
	HWCExtended_NONE     HWCExtended_InterpretationE = 0
	HWCExtended_STRENGTH HWCExtended_InterpretationE = 1
	HWCExtended_STEPS    HWCExtended_InterpretationE = 3
	HWCExtended_VU       HWCExtended_InterpretationE = 4
	HWCExtended_FADER    HWCExtended_InterpretationE = 5
	HWCExtended_BUZZER   HWCExtended_InterpretationE = 6
)

// Enum value maps for HWCExtended_InterpretationE.
var (
	HWCExtended_InterpretationE_name = map[int32]string{
		0: "NONE",
		1: "STRENGTH",
		3: "STEPS",
		4: "VU",
		5: "FADER",
		6: "BUZZER",
	}
	HWCExtended_InterpretationE_value = map[string]int32{
		"NONE":     0,
		"STRENGTH": 1,
		"STEPS":    3,
		"VU":       4,
		"FADER":    5,
		"BUZZER":   6,
	}
)

func (x HWCExtended_InterpretationE) Enum() *HWCExtended_InterpretationE {
	p := new(HWCExtended_InterpretationE)
	*p = x
	return p
}

func (x HWCExtended_InterpretationE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HWCExtended_InterpretationE) Descriptor() protoreflect.EnumDescriptor {
	return file_ibeam_rawpanel_proto_enumTypes[3].Descriptor()
}

func (HWCExtended_InterpretationE) Type() protoreflect.EnumType {
	return &file_ibeam_rawpanel_proto_enumTypes[3]
}

func (x HWCExtended_InterpretationE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HWCExtended_InterpretationE.Descriptor instead.
func (HWCExtended_InterpretationE) EnumDescriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{10, 0}
}

type ColorIndex_Colors int32

const (
	ColorIndex_DEFAULT  ColorIndex_Colors = 0
	ColorIndex_OFF      ColorIndex_Colors = 1
	ColorIndex_WHITE    ColorIndex_Colors = 2
	ColorIndex_WARM     ColorIndex_Colors = 3
	ColorIndex_RED      ColorIndex_Colors = 4
	ColorIndex_ROSE     ColorIndex_Colors = 5
	ColorIndex_PINK     ColorIndex_Colors = 6
	ColorIndex_PURPLE   ColorIndex_Colors = 7
	ColorIndex_AMBER    ColorIndex_Colors = 8
	ColorIndex_YELLOW   ColorIndex_Colors = 9
	ColorIndex_DARKBLUE ColorIndex_Colors = 10
	ColorIndex_BLUE     ColorIndex_Colors = 11
	ColorIndex_ICE      ColorIndex_Colors = 12
	ColorIndex_CYAN     ColorIndex_Colors = 13
	ColorIndex_SPRING   ColorIndex_Colors = 14
	ColorIndex_GREEN    ColorIndex_Colors = 15
	ColorIndex_MINT     ColorIndex_Colors = 16
)

// Enum value maps for ColorIndex_Colors.
var (
	ColorIndex_Colors_name = map[int32]string{
		0:  "DEFAULT",
		1:  "OFF",
		2:  "WHITE",
		3:  "WARM",
		4:  "RED",
		5:  "ROSE",
		6:  "PINK",
		7:  "PURPLE",
		8:  "AMBER",
		9:  "YELLOW",
		10: "DARKBLUE",
		11: "BLUE",
		12: "ICE",
		13: "CYAN",
		14: "SPRING",
		15: "GREEN",
		16: "MINT",
	}
	ColorIndex_Colors_value = map[string]int32{
		"DEFAULT":  0,
		"OFF":      1,
		"WHITE":    2,
		"WARM":     3,
		"RED":      4,
		"ROSE":     5,
		"PINK":     6,
		"PURPLE":   7,
		"AMBER":    8,
		"YELLOW":   9,
		"DARKBLUE": 10,
		"BLUE":     11,
		"ICE":      12,
		"CYAN":     13,
		"SPRING":   14,
		"GREEN":    15,
		"MINT":     16,
	}
)

func (x ColorIndex_Colors) Enum() *ColorIndex_Colors {
	p := new(ColorIndex_Colors)
	*p = x
	return p
}

func (x ColorIndex_Colors) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColorIndex_Colors) Descriptor() protoreflect.EnumDescriptor {
	return file_ibeam_rawpanel_proto_enumTypes[4].Descriptor()
}

func (ColorIndex_Colors) Type() protoreflect.EnumType {
	return &file_ibeam_rawpanel_proto_enumTypes[4]
}

func (x ColorIndex_Colors) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ColorIndex_Colors.Descriptor instead.
func (ColorIndex_Colors) EnumDescriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{14, 0}
}

type HWCText_FormattingE int32

const (
	HWCText_FMT_INTEGER     HWCText_FormattingE = 0
	HWCText_FMT_FLOAT_2DEZ  HWCText_FormattingE = 1
	HWCText_FMT_PERCENTAGE  HWCText_FormattingE = 2
	HWCText_FMT_DB          HWCText_FormattingE = 3
	HWCText_FMT_FRAMES      HWCText_FormattingE = 4
	HWCText_FMT_ONEOVERX    HWCText_FormattingE = 5
	HWCText_FMT_KELVIN      HWCText_FormattingE = 6
	HWCText_FMT_HIDE        HWCText_FormattingE = 7
	HWCText_FMT_FLOAT_X_XXX HWCText_FormattingE = 8
	HWCText_FMT_FLOAT_XX_XX HWCText_FormattingE = 9
	HWCText_FMT_ONELINE     HWCText_FormattingE = 10
	HWCText_FMT_TWOLINES    HWCText_FormattingE = 11
	HWCText_FMT_FLOAT_XXX_X HWCText_FormattingE = 12
)

// Enum value maps for HWCText_FormattingE.
var (
	HWCText_FormattingE_name = map[int32]string{
		0:  "FMT_INTEGER",
		1:  "FMT_FLOAT_2DEZ",
		2:  "FMT_PERCENTAGE",
		3:  "FMT_DB",
		4:  "FMT_FRAMES",
		5:  "FMT_ONEOVERX",
		6:  "FMT_KELVIN",
		7:  "FMT_HIDE",
		8:  "FMT_FLOAT_X_XXX",
		9:  "FMT_FLOAT_XX_XX",
		10: "FMT_ONELINE",
		11: "FMT_TWOLINES",
		12: "FMT_FLOAT_XXX_X",
	}
	HWCText_FormattingE_value = map[string]int32{
		"FMT_INTEGER":     0,
		"FMT_FLOAT_2DEZ":  1,
		"FMT_PERCENTAGE":  2,
		"FMT_DB":          3,
		"FMT_FRAMES":      4,
		"FMT_ONEOVERX":    5,
		"FMT_KELVIN":      6,
		"FMT_HIDE":        7,
		"FMT_FLOAT_X_XXX": 8,
		"FMT_FLOAT_XX_XX": 9,
		"FMT_ONELINE":     10,
		"FMT_TWOLINES":    11,
		"FMT_FLOAT_XXX_X": 12,
	}
)

func (x HWCText_FormattingE) Enum() *HWCText_FormattingE {
	p := new(HWCText_FormattingE)
	*p = x
	return p
}

func (x HWCText_FormattingE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HWCText_FormattingE) Descriptor() protoreflect.EnumDescriptor {
	return file_ibeam_rawpanel_proto_enumTypes[5].Descriptor()
}

func (HWCText_FormattingE) Type() protoreflect.EnumType {
	return &file_ibeam_rawpanel_proto_enumTypes[5]
}

func (x HWCText_FormattingE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HWCText_FormattingE.Descriptor instead.
func (HWCText_FormattingE) EnumDescriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{15, 0}
}

type HWCText_StateIconE int32

const (
	HWCText_SI_NONE     HWCText_StateIconE = 0
	HWCText_SI_FINE     HWCText_StateIconE = 1
	HWCText_SI_LOCK     HWCText_StateIconE = 2
	HWCText_SI_NOACCESS HWCText_StateIconE = 3
)

// Enum value maps for HWCText_StateIconE.
var (
	HWCText_StateIconE_name = map[int32]string{
		0: "SI_NONE",
		1: "SI_FINE",
		2: "SI_LOCK",
		3: "SI_NOACCESS",
	}
	HWCText_StateIconE_value = map[string]int32{
		"SI_NONE":     0,
		"SI_FINE":     1,
		"SI_LOCK":     2,
		"SI_NOACCESS": 3,
	}
)

func (x HWCText_StateIconE) Enum() *HWCText_StateIconE {
	p := new(HWCText_StateIconE)
	*p = x
	return p
}

func (x HWCText_StateIconE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HWCText_StateIconE) Descriptor() protoreflect.EnumDescriptor {
	return file_ibeam_rawpanel_proto_enumTypes[6].Descriptor()
}

func (HWCText_StateIconE) Type() protoreflect.EnumType {
	return &file_ibeam_rawpanel_proto_enumTypes[6]
}

func (x HWCText_StateIconE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HWCText_StateIconE.Descriptor instead.
func (HWCText_StateIconE) EnumDescriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{15, 1}
}

type HWCText_ModifierIconE int32

const (
	HWCText_MI_NONE     HWCText_ModifierIconE = 0
	HWCText_MI_CYCLE    HWCText_ModifierIconE = 1
	HWCText_MI_DOWN     HWCText_ModifierIconE = 2
	HWCText_MI_UP       HWCText_ModifierIconE = 3
	HWCText_MI_HOLD     HWCText_ModifierIconE = 4
	HWCText_MI_TOGGLE   HWCText_ModifierIconE = 5
	HWCText_MI_OK       HWCText_ModifierIconE = 6
	HWCText_MI_QUESTION HWCText_ModifierIconE = 7
)

// Enum value maps for HWCText_ModifierIconE.
var (
	HWCText_ModifierIconE_name = map[int32]string{
		0: "MI_NONE",
		1: "MI_CYCLE",
		2: "MI_DOWN",
		3: "MI_UP",
		4: "MI_HOLD",
		5: "MI_TOGGLE",
		6: "MI_OK",
		7: "MI_QUESTION",
	}
	HWCText_ModifierIconE_value = map[string]int32{
		"MI_NONE":     0,
		"MI_CYCLE":    1,
		"MI_DOWN":     2,
		"MI_UP":       3,
		"MI_HOLD":     4,
		"MI_TOGGLE":   5,
		"MI_OK":       6,
		"MI_QUESTION": 7,
	}
)

func (x HWCText_ModifierIconE) Enum() *HWCText_ModifierIconE {
	p := new(HWCText_ModifierIconE)
	*p = x
	return p
}

func (x HWCText_ModifierIconE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HWCText_ModifierIconE) Descriptor() protoreflect.EnumDescriptor {
	return file_ibeam_rawpanel_proto_enumTypes[7].Descriptor()
}

func (HWCText_ModifierIconE) Type() protoreflect.EnumType {
	return &file_ibeam_rawpanel_proto_enumTypes[7]
}

func (x HWCText_ModifierIconE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HWCText_ModifierIconE.Descriptor instead.
func (HWCText_ModifierIconE) EnumDescriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{15, 2}
}

type HWCText_PairModeE int32

const (
	HWCText_PM_OFF          HWCText_PairModeE = 0
	HWCText_PM_UNMARKED     HWCText_PairModeE = 1
	HWCText_PM_UPPER_MARKED HWCText_PairModeE = 2
	HWCText_PM_LOWER_MARKED HWCText_PairModeE = 3
	HWCText_PM_BOTH_MARKED  HWCText_PairModeE = 4
)

// Enum value maps for HWCText_PairModeE.
var (
	HWCText_PairModeE_name = map[int32]string{
		0: "PM_OFF",
		1: "PM_UNMARKED",
		2: "PM_UPPER_MARKED",
		3: "PM_LOWER_MARKED",
		4: "PM_BOTH_MARKED",
	}
	HWCText_PairModeE_value = map[string]int32{
		"PM_OFF":          0,
		"PM_UNMARKED":     1,
		"PM_UPPER_MARKED": 2,
		"PM_LOWER_MARKED": 3,
		"PM_BOTH_MARKED":  4,
	}
)

func (x HWCText_PairModeE) Enum() *HWCText_PairModeE {
	p := new(HWCText_PairModeE)
	*p = x
	return p
}

func (x HWCText_PairModeE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HWCText_PairModeE) Descriptor() protoreflect.EnumDescriptor {
	return file_ibeam_rawpanel_proto_enumTypes[8].Descriptor()
}

func (HWCText_PairModeE) Type() protoreflect.EnumType {
	return &file_ibeam_rawpanel_proto_enumTypes[8]
}

func (x HWCText_PairModeE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HWCText_PairModeE.Descriptor instead.
func (HWCText_PairModeE) EnumDescriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{15, 3}
}

type HWCText_ScaleM_ScaleTypeE int32

const (
	HWCText_ScaleM_ST_OFF           HWCText_ScaleM_ScaleTypeE = 0
	HWCText_ScaleM_ST_STRENGTH      HWCText_ScaleM_ScaleTypeE = 1
	HWCText_ScaleM_ST_CENTER_MARKER HWCText_ScaleM_ScaleTypeE = 2
	HWCText_ScaleM_ST_CENTER_BAR    HWCText_ScaleM_ScaleTypeE = 3
)

// Enum value maps for HWCText_ScaleM_ScaleTypeE.
var (
	HWCText_ScaleM_ScaleTypeE_name = map[int32]string{
		0: "ST_OFF",
		1: "ST_STRENGTH",
		2: "ST_CENTER_MARKER",
		3: "ST_CENTER_BAR",
	}
	HWCText_ScaleM_ScaleTypeE_value = map[string]int32{
		"ST_OFF":           0,
		"ST_STRENGTH":      1,
		"ST_CENTER_MARKER": 2,
		"ST_CENTER_BAR":    3,
	}
)

func (x HWCText_ScaleM_ScaleTypeE) Enum() *HWCText_ScaleM_ScaleTypeE {
	p := new(HWCText_ScaleM_ScaleTypeE)
	*p = x
	return p
}

func (x HWCText_ScaleM_ScaleTypeE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HWCText_ScaleM_ScaleTypeE) Descriptor() protoreflect.EnumDescriptor {
	return file_ibeam_rawpanel_proto_enumTypes[9].Descriptor()
}

func (HWCText_ScaleM_ScaleTypeE) Type() protoreflect.EnumType {
	return &file_ibeam_rawpanel_proto_enumTypes[9]
}

func (x HWCText_ScaleM_ScaleTypeE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HWCText_ScaleM_ScaleTypeE.Descriptor instead.
func (HWCText_ScaleM_ScaleTypeE) EnumDescriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{15, 0, 0}
}

type HWCText_TextStyle_Font_FontFaceE int32

const (
	HWCText_TextStyle_Font_ST_DEFAULT HWCText_TextStyle_Font_FontFaceE = 0
	HWCText_TextStyle_Font_ST_BOLD    HWCText_TextStyle_Font_FontFaceE = 1
	HWCText_TextStyle_Font_ST_TINY    HWCText_TextStyle_Font_FontFaceE = 2
)

// Enum value maps for HWCText_TextStyle_Font_FontFaceE.
var (
	HWCText_TextStyle_Font_FontFaceE_name = map[int32]string{
		0: "ST_DEFAULT",
		1: "ST_BOLD",
		2: "ST_TINY",
	}
	HWCText_TextStyle_Font_FontFaceE_value = map[string]int32{
		"ST_DEFAULT": 0,
		"ST_BOLD":    1,
		"ST_TINY":    2,
	}
)

func (x HWCText_TextStyle_Font_FontFaceE) Enum() *HWCText_TextStyle_Font_FontFaceE {
	p := new(HWCText_TextStyle_Font_FontFaceE)
	*p = x
	return p
}

func (x HWCText_TextStyle_Font_FontFaceE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HWCText_TextStyle_Font_FontFaceE) Descriptor() protoreflect.EnumDescriptor {
	return file_ibeam_rawpanel_proto_enumTypes[10].Descriptor()
}

func (HWCText_TextStyle_Font_FontFaceE) Type() protoreflect.EnumType {
	return &file_ibeam_rawpanel_proto_enumTypes[10]
}

func (x HWCText_TextStyle_Font_FontFaceE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HWCText_TextStyle_Font_FontFaceE.Descriptor instead.
func (HWCText_TextStyle_Font_FontFaceE) EnumDescriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{15, 1, 0, 0}
}

type HWCGfx_ImageTypeE int32

const (
	HWCGfx_MONO     HWCGfx_ImageTypeE = 0
	HWCGfx_RGB16bit HWCGfx_ImageTypeE = 1
	HWCGfx_Gray4bit HWCGfx_ImageTypeE = 2
)

// Enum value maps for HWCGfx_ImageTypeE.
var (
	HWCGfx_ImageTypeE_name = map[int32]string{
		0: "MONO",
		1: "RGB16bit",
		2: "Gray4bit",
	}
	HWCGfx_ImageTypeE_value = map[string]int32{
		"MONO":     0,
		"RGB16bit": 1,
		"Gray4bit": 2,
	}
)

func (x HWCGfx_ImageTypeE) Enum() *HWCGfx_ImageTypeE {
	p := new(HWCGfx_ImageTypeE)
	*p = x
	return p
}

func (x HWCGfx_ImageTypeE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HWCGfx_ImageTypeE) Descriptor() protoreflect.EnumDescriptor {
	return file_ibeam_rawpanel_proto_enumTypes[11].Descriptor()
}

func (HWCGfx_ImageTypeE) Type() protoreflect.EnumType {
	return &file_ibeam_rawpanel_proto_enumTypes[11]
}

func (x HWCGfx_ImageTypeE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HWCGfx_ImageTypeE.Descriptor instead.
func (HWCGfx_ImageTypeE) EnumDescriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{16, 0}
}

type OutboundMessage_FlowMsg int32

const (
	OutboundMessage_NONE  OutboundMessage_FlowMsg = 0
	OutboundMessage_PING  OutboundMessage_FlowMsg = 1   // "ping",
	OutboundMessage_ACK   OutboundMessage_FlowMsg = 2   // "ack",
	OutboundMessage_NACK  OutboundMessage_FlowMsg = 3   // "nack",
	OutboundMessage_BSY   OutboundMessage_FlowMsg = 4   // "BSY",
	OutboundMessage_RDY   OutboundMessage_FlowMsg = 5   // "RDY",
	OutboundMessage_HELLO OutboundMessage_FlowMsg = 100 // Hi there, I'm a panel!
)

// Enum value maps for OutboundMessage_FlowMsg.
var (
	OutboundMessage_FlowMsg_name = map[int32]string{
		0:   "NONE",
		1:   "PING",
		2:   "ACK",
		3:   "NACK",
		4:   "BSY",
		5:   "RDY",
		100: "HELLO",
	}
	OutboundMessage_FlowMsg_value = map[string]int32{
		"NONE":  0,
		"PING":  1,
		"ACK":   2,
		"NACK":  3,
		"BSY":   4,
		"RDY":   5,
		"HELLO": 100,
	}
)

func (x OutboundMessage_FlowMsg) Enum() *OutboundMessage_FlowMsg {
	p := new(OutboundMessage_FlowMsg)
	*p = x
	return p
}

func (x OutboundMessage_FlowMsg) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OutboundMessage_FlowMsg) Descriptor() protoreflect.EnumDescriptor {
	return file_ibeam_rawpanel_proto_enumTypes[12].Descriptor()
}

func (OutboundMessage_FlowMsg) Type() protoreflect.EnumType {
	return &file_ibeam_rawpanel_proto_enumTypes[12]
}

func (x OutboundMessage_FlowMsg) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OutboundMessage_FlowMsg.Descriptor instead.
func (OutboundMessage_FlowMsg) EnumDescriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{17, 0}
}

type BinaryEvent_EdgeID int32

const (
	BinaryEvent_UNKNOWN BinaryEvent_EdgeID = 0
	BinaryEvent_TOP     BinaryEvent_EdgeID = 1
	BinaryEvent_LEFT    BinaryEvent_EdgeID = 2
	BinaryEvent_BOTTOM  BinaryEvent_EdgeID = 4
	BinaryEvent_RIGHT   BinaryEvent_EdgeID = 8
	BinaryEvent_ENCODER BinaryEvent_EdgeID = 16
)

// Enum value maps for BinaryEvent_EdgeID.
var (
	BinaryEvent_EdgeID_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "TOP",
		2:  "LEFT",
		4:  "BOTTOM",
		8:  "RIGHT",
		16: "ENCODER",
	}
	BinaryEvent_EdgeID_value = map[string]int32{
		"UNKNOWN": 0,
		"TOP":     1,
		"LEFT":    2,
		"BOTTOM":  4,
		"RIGHT":   8,
		"ENCODER": 16,
	}
)

func (x BinaryEvent_EdgeID) Enum() *BinaryEvent_EdgeID {
	p := new(BinaryEvent_EdgeID)
	*p = x
	return p
}

func (x BinaryEvent_EdgeID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BinaryEvent_EdgeID) Descriptor() protoreflect.EnumDescriptor {
	return file_ibeam_rawpanel_proto_enumTypes[13].Descriptor()
}

func (BinaryEvent_EdgeID) Type() protoreflect.EnumType {
	return &file_ibeam_rawpanel_proto_enumTypes[13]
}

func (x BinaryEvent_EdgeID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BinaryEvent_EdgeID.Descriptor instead.
func (BinaryEvent_EdgeID) EnumDescriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{21, 0}
}

// Wrapper for all incoming messages (Incoming = to Panel from System)
type InboundMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowMessage InboundMessage_FlowMsg `protobuf:"varint,1,opt,name=FlowMessage,proto3,enum=ibeam_rawpanel.InboundMessage_FlowMsg" json:"FlowMessage,omitempty"` // Only non-zero values are acted upon
	Command     *Command               `protobuf:"bytes,2,opt,name=Command,proto3" json:"Command,omitempty"`
	States      []*HWCState            `protobuf:"bytes,8,rep,name=States,proto3" json:"States,omitempty"`
}

func (x *InboundMessage) Reset() {
	*x = InboundMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_rawpanel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InboundMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InboundMessage) ProtoMessage() {}

func (x *InboundMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_rawpanel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InboundMessage.ProtoReflect.Descriptor instead.
func (*InboundMessage) Descriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{0}
}

func (x *InboundMessage) GetFlowMessage() InboundMessage_FlowMsg {
	if x != nil {
		return x.FlowMessage
	}
	return InboundMessage_NONE
}

func (x *InboundMessage) GetCommand() *Command {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *InboundMessage) GetStates() []*HWCState {
	if x != nil {
		return x.States
	}
	return nil
}

// All the bools in the Command section is like a trigger when true
type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivatePanel         bool               `protobuf:"varint,1,opt,name=ActivatePanel,proto3" json:"ActivatePanel,omitempty"`                 // "ActivePanel=1",
	SendPanelInfo         bool               `protobuf:"varint,2,opt,name=SendPanelInfo,proto3" json:"SendPanelInfo,omitempty"`                 // "list",
	SendPanelTopology     bool               `protobuf:"varint,3,opt,name=SendPanelTopology,proto3" json:"SendPanelTopology,omitempty"`         // "PanelTopology?",
	ReportHWCavailability bool               `protobuf:"varint,4,opt,name=ReportHWCavailability,proto3" json:"ReportHWCavailability,omitempty"` // "map" -> "avail"
	SendBurninProfile     bool               `protobuf:"varint,6,opt,name=SendBurninProfile,proto3" json:"SendBurninProfile,omitempty"`         // Return the burnin json profiles of a controller (Only for ibeam panels)
	ClearAll              bool               `protobuf:"varint,10,opt,name=ClearAll,proto3" json:"ClearAll,omitempty"`                          // "Clear",
	ClearLEDs             bool               `protobuf:"varint,11,opt,name=ClearLEDs,proto3" json:"ClearLEDs,omitempty"`                        // "ClearLEDs",
	ClearDisplays         bool               `protobuf:"varint,12,opt,name=ClearDisplays,proto3" json:"ClearDisplays,omitempty"`                // "ClearDisplays",
	WakeUp                bool               `protobuf:"varint,5,opt,name=WakeUp,proto3" json:"WakeUp,omitempty"`                               // "WakeUp!",
	GetSleepTimeout       bool               `protobuf:"varint,20,opt,name=GetSleepTimeout,proto3" json:"GetSleepTimeout,omitempty"`            // "SleepTimer?",
	SetSleepTimeout       *SleepTimeout      `protobuf:"bytes,21,opt,name=SetSleepTimeout,proto3" json:"SetSleepTimeout,omitempty"`             // SleepTimer=xx
	SetWebserverEnabled   *WebserverState    `protobuf:"bytes,22,opt,name=SetWebserverEnabled,proto3" json:"SetWebserverEnabled,omitempty"`     // Webserver=x
	PanelBrightness       *Brightness        `protobuf:"bytes,23,opt,name=PanelBrightness,proto3" json:"PanelBrightness,omitempty"`             // PanelBrightness=x,y
	PublishSystemStat     *PublishSystemStat `protobuf:"bytes,30,opt,name=PublishSystemStat,proto3" json:"PublishSystemStat,omitempty"`
	LoadCPU               *LoadCPU           `protobuf:"bytes,31,opt,name=LoadCPU,proto3" json:"LoadCPU,omitempty"`
}

func (x *Command) Reset() {
	*x = Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_rawpanel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_rawpanel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{1}
}

func (x *Command) GetActivatePanel() bool {
	if x != nil {
		return x.ActivatePanel
	}
	return false
}

func (x *Command) GetSendPanelInfo() bool {
	if x != nil {
		return x.SendPanelInfo
	}
	return false
}

func (x *Command) GetSendPanelTopology() bool {
	if x != nil {
		return x.SendPanelTopology
	}
	return false
}

func (x *Command) GetReportHWCavailability() bool {
	if x != nil {
		return x.ReportHWCavailability
	}
	return false
}

func (x *Command) GetSendBurninProfile() bool {
	if x != nil {
		return x.SendBurninProfile
	}
	return false
}

func (x *Command) GetClearAll() bool {
	if x != nil {
		return x.ClearAll
	}
	return false
}

func (x *Command) GetClearLEDs() bool {
	if x != nil {
		return x.ClearLEDs
	}
	return false
}

func (x *Command) GetClearDisplays() bool {
	if x != nil {
		return x.ClearDisplays
	}
	return false
}

func (x *Command) GetWakeUp() bool {
	if x != nil {
		return x.WakeUp
	}
	return false
}

func (x *Command) GetGetSleepTimeout() bool {
	if x != nil {
		return x.GetSleepTimeout
	}
	return false
}

func (x *Command) GetSetSleepTimeout() *SleepTimeout {
	if x != nil {
		return x.SetSleepTimeout
	}
	return nil
}

func (x *Command) GetSetWebserverEnabled() *WebserverState {
	if x != nil {
		return x.SetWebserverEnabled
	}
	return nil
}

func (x *Command) GetPanelBrightness() *Brightness {
	if x != nil {
		return x.PanelBrightness
	}
	return nil
}

func (x *Command) GetPublishSystemStat() *PublishSystemStat {
	if x != nil {
		return x.PublishSystemStat
	}
	return nil
}

func (x *Command) GetLoadCPU() *LoadCPU {
	if x != nil {
		return x.LoadCPU
	}
	return nil
}

type SleepTimeout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint32 `protobuf:"varint,1,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *SleepTimeout) Reset() {
	*x = SleepTimeout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_rawpanel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SleepTimeout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SleepTimeout) ProtoMessage() {}

func (x *SleepTimeout) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_rawpanel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SleepTimeout.ProtoReflect.Descriptor instead.
func (*SleepTimeout) Descriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{2}
}

func (x *SleepTimeout) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type WebserverState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=Enabled,proto3" json:"Enabled,omitempty"`
}

func (x *WebserverState) Reset() {
	*x = WebserverState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_rawpanel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebserverState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebserverState) ProtoMessage() {}

func (x *WebserverState) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_rawpanel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebserverState.ProtoReflect.Descriptor instead.
func (*WebserverState) Descriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{3}
}

func (x *WebserverState) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type Brightness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OLEDs uint32 `protobuf:"varint,1,opt,name=OLEDs,proto3" json:"OLEDs,omitempty"`
	LEDs  uint32 `protobuf:"varint,2,opt,name=LEDs,proto3" json:"LEDs,omitempty"`
}

func (x *Brightness) Reset() {
	*x = Brightness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_rawpanel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Brightness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Brightness) ProtoMessage() {}

func (x *Brightness) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_rawpanel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Brightness.ProtoReflect.Descriptor instead.
func (*Brightness) Descriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{4}
}

func (x *Brightness) GetOLEDs() uint32 {
	if x != nil {
		return x.OLEDs
	}
	return 0
}

func (x *Brightness) GetLEDs() uint32 {
	if x != nil {
		return x.LEDs
	}
	return 0
}

type PublishSystemStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeriodSec uint32 `protobuf:"varint,2,opt,name=PeriodSec,proto3" json:"PeriodSec,omitempty"` // Disabled when 0
}

func (x *PublishSystemStat) Reset() {
	*x = PublishSystemStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_rawpanel_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishSystemStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishSystemStat) ProtoMessage() {}

func (x *PublishSystemStat) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_rawpanel_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishSystemStat.ProtoReflect.Descriptor instead.
func (*PublishSystemStat) Descriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{5}
}

func (x *PublishSystemStat) GetPeriodSec() uint32 {
	if x != nil {
		return x.PeriodSec
	}
	return 0
}

type LoadCPU struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level LoadCPU_LevelE `protobuf:"varint,1,opt,name=Level,proto3,enum=ibeam_rawpanel.LoadCPU_LevelE" json:"Level,omitempty"`
}

func (x *LoadCPU) Reset() {
	*x = LoadCPU{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_rawpanel_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadCPU) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadCPU) ProtoMessage() {}

func (x *LoadCPU) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_rawpanel_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadCPU.ProtoReflect.Descriptor instead.
func (*LoadCPU) Descriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{6}
}

func (x *LoadCPU) GetLevel() LoadCPU_LevelE {
	if x != nil {
		return x.Level
	}
	return LoadCPU_OFF
}

type HWCState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HWCIDs              []uint32             `protobuf:"varint,1,rep,packed,name=HWCIDs,proto3" json:"HWCIDs,omitempty"`
	HWCMode             *HWCMode             `protobuf:"bytes,2,opt,name=HWCMode,proto3" json:"HWCMode,omitempty"`         // HWC#xx=yy
	HWCColor            *HWCColor            `protobuf:"bytes,3,opt,name=HWCColor,proto3" json:"HWCColor,omitempty"`       // HWCc#xx=yy
	HWCExtended         *HWCExtended         `protobuf:"bytes,4,opt,name=HWCExtended,proto3" json:"HWCExtended,omitempty"` // HWCx#xx=yy
	HWCText             *HWCText             `protobuf:"bytes,5,opt,name=HWCText,proto3" json:"HWCText,omitempty"`         // HWCt#xx=yy
	HWCGfx              *HWCGfx              `protobuf:"bytes,6,opt,name=HWCGfx,proto3" json:"HWCGfx,omitempty"`           // HWCg#xx=yy   + HWCgRGB#xx=yy+ HWCgGray#xx=yy
	PublishRawADCValues *PublishRawADCValues `protobuf:"bytes,7,opt,name=PublishRawADCValues,proto3" json:"PublishRawADCValues,omitempty"`
}

func (x *HWCState) Reset() {
	*x = HWCState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_rawpanel_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HWCState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HWCState) ProtoMessage() {}

func (x *HWCState) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_rawpanel_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HWCState.ProtoReflect.Descriptor instead.
func (*HWCState) Descriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{7}
}

func (x *HWCState) GetHWCIDs() []uint32 {
	if x != nil {
		return x.HWCIDs
	}
	return nil
}

func (x *HWCState) GetHWCMode() *HWCMode {
	if x != nil {
		return x.HWCMode
	}
	return nil
}

func (x *HWCState) GetHWCColor() *HWCColor {
	if x != nil {
		return x.HWCColor
	}
	return nil
}

func (x *HWCState) GetHWCExtended() *HWCExtended {
	if x != nil {
		return x.HWCExtended
	}
	return nil
}

func (x *HWCState) GetHWCText() *HWCText {
	if x != nil {
		return x.HWCText
	}
	return nil
}

func (x *HWCState) GetHWCGfx() *HWCGfx {
	if x != nil {
		return x.HWCGfx
	}
	return nil
}

func (x *HWCState) GetPublishRawADCValues() *PublishRawADCValues {
	if x != nil {
		return x.PublishRawADCValues
	}
	return nil
}

type PublishRawADCValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=Enabled,proto3" json:"Enabled,omitempty"`
}

func (x *PublishRawADCValues) Reset() {
	*x = PublishRawADCValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_rawpanel_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishRawADCValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishRawADCValues) ProtoMessage() {}

func (x *PublishRawADCValues) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_rawpanel_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishRawADCValues.ProtoReflect.Descriptor instead.
func (*PublishRawADCValues) Descriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{8}
}

func (x *PublishRawADCValues) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// HWC#xx=yy
// Changes from UniSketch TCP Client/RawPanel 1.0:
// Blink bit 4 is left out in v2.0 - legacy
type HWCMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State        HWCMode_StateE `protobuf:"varint,2,opt,name=State,proto3,enum=ibeam_rawpanel.HWCMode_StateE" json:"State,omitempty"` // Intensity for LEDs or ON/OFF state for digital outputs (like relays)
	BlinkPattern uint32         `protobuf:"varint,3,opt,name=BlinkPattern,proto3" json:"BlinkPattern,omitempty"`                      // Blink pattern, 4 bits
}

func (x *HWCMode) Reset() {
	*x = HWCMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_rawpanel_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HWCMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HWCMode) ProtoMessage() {}

func (x *HWCMode) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_rawpanel_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HWCMode.ProtoReflect.Descriptor instead.
func (*HWCMode) Descriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{9}
}

func (x *HWCMode) GetState() HWCMode_StateE {
	if x != nil {
		return x.State
	}
	return HWCMode_OFF
}

func (x *HWCMode) GetBlinkPattern() uint32 {
	if x != nil {
		return x.BlinkPattern
	}
	return 0
}

// Extended state of hardware component
type HWCExtended struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interpretation HWCExtended_InterpretationE `protobuf:"varint,2,opt,name=Interpretation,proto3,enum=ibeam_rawpanel.HWCExtended_InterpretationE" json:"Interpretation,omitempty"` // Value type
	Value          uint32                      `protobuf:"varint,3,opt,name=Value,proto3" json:"Value,omitempty"`                                                                   // Value, 10 bits
}

func (x *HWCExtended) Reset() {
	*x = HWCExtended{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_rawpanel_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HWCExtended) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HWCExtended) ProtoMessage() {}

func (x *HWCExtended) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_rawpanel_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HWCExtended.ProtoReflect.Descriptor instead.
func (*HWCExtended) Descriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{10}
}

func (x *HWCExtended) GetInterpretation() HWCExtended_InterpretationE {
	if x != nil {
		return x.Interpretation
	}
	return HWCExtended_NONE
}

func (x *HWCExtended) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Color.
// Could have used "oneof" but disliked because of the extra convolution
// colorRGB takes precedence over colorIndex
type HWCColor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One of:
	ColorRGB   *ColorRGB   `protobuf:"bytes,1,opt,name=ColorRGB,proto3" json:"ColorRGB,omitempty"`
	ColorIndex *ColorIndex `protobuf:"bytes,2,opt,name=ColorIndex,proto3" json:"ColorIndex,omitempty"`
}

func (x *HWCColor) Reset() {
	*x = HWCColor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_rawpanel_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HWCColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HWCColor) ProtoMessage() {}

func (x *HWCColor) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_rawpanel_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HWCColor.ProtoReflect.Descriptor instead.
func (*HWCColor) Descriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{11}
}

func (x *HWCColor) GetColorRGB() *ColorRGB {
	if x != nil {
		return x.ColorRGB
	}
	return nil
}

func (x *HWCColor) GetColorIndex() *ColorIndex {
	if x != nil {
		return x.ColorIndex
	}
	return nil
}

// Color, but used in HWCText. Same as HWCColor
type Color struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One of:
	ColorRGB   *ColorRGB   `protobuf:"bytes,1,opt,name=ColorRGB,proto3" json:"ColorRGB,omitempty"`
	ColorIndex *ColorIndex `protobuf:"bytes,2,opt,name=ColorIndex,proto3" json:"ColorIndex,omitempty"`
}

func (x *Color) Reset() {
	*x = Color{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_rawpanel_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Color) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Color) ProtoMessage() {}

func (x *Color) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_rawpanel_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Color.ProtoReflect.Descriptor instead.
func (*Color) Descriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{12}
}

func (x *Color) GetColorRGB() *ColorRGB {
	if x != nil {
		return x.ColorRGB
	}
	return nil
}

func (x *Color) GetColorIndex() *ColorIndex {
	if x != nil {
		return x.ColorIndex
	}
	return nil
}

// Color as RGB (3x2 bits)
type ColorRGB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Red   uint32 `protobuf:"varint,1,opt,name=Red,proto3" json:"Red,omitempty"`
	Green uint32 `protobuf:"varint,2,opt,name=Green,proto3" json:"Green,omitempty"`
	Blue  uint32 `protobuf:"varint,3,opt,name=Blue,proto3" json:"Blue,omitempty"`
}

func (x *ColorRGB) Reset() {
	*x = ColorRGB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_rawpanel_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColorRGB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColorRGB) ProtoMessage() {}

func (x *ColorRGB) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_rawpanel_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColorRGB.ProtoReflect.Descriptor instead.
func (*ColorRGB) Descriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{13}
}

func (x *ColorRGB) GetRed() uint32 {
	if x != nil {
		return x.Red
	}
	return 0
}

func (x *ColorRGB) GetGreen() uint32 {
	if x != nil {
		return x.Green
	}
	return 0
}

func (x *ColorRGB) GetBlue() uint32 {
	if x != nil {
		return x.Blue
	}
	return 0
}

// Color as a name/index:
type ColorIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index ColorIndex_Colors `protobuf:"varint,1,opt,name=Index,proto3,enum=ibeam_rawpanel.ColorIndex_Colors" json:"Index,omitempty"`
}

func (x *ColorIndex) Reset() {
	*x = ColorIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_rawpanel_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColorIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColorIndex) ProtoMessage() {}

func (x *ColorIndex) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_rawpanel_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColorIndex.ProtoReflect.Descriptor instead.
func (*ColorIndex) Descriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{14}
}

func (x *ColorIndex) GetIndex() ColorIndex_Colors {
	if x != nil {
		return x.Index
	}
	return ColorIndex_DEFAULT
}

// Text
type HWCText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntegerValue    int32                 `protobuf:"zigzag32,2,opt,name=IntegerValue,proto3" json:"IntegerValue,omitempty"`                                         // Index 0
	Formatting      HWCText_FormattingE   `protobuf:"varint,3,opt,name=Formatting,proto3,enum=ibeam_rawpanel.HWCText_FormattingE" json:"Formatting,omitempty"`       // Index 1
	StateIcon       HWCText_StateIconE    `protobuf:"varint,5,opt,name=StateIcon,proto3,enum=ibeam_rawpanel.HWCText_StateIconE" json:"StateIcon,omitempty"`          // Index 2
	ModifierIcon    HWCText_ModifierIconE `protobuf:"varint,6,opt,name=ModifierIcon,proto3,enum=ibeam_rawpanel.HWCText_ModifierIconE" json:"ModifierIcon,omitempty"` // Index 2
	Title           string                `protobuf:"bytes,7,opt,name=Title,proto3" json:"Title,omitempty"`                                                          // Index 3
	SolidHeaderBar  bool                  `protobuf:"varint,8,opt,name=SolidHeaderBar,proto3" json:"SolidHeaderBar,omitempty"`                                       // Index 4
	Textline1       string                `protobuf:"bytes,9,opt,name=Textline1,proto3" json:"Textline1,omitempty"`                                                  // Index 5
	Textline2       string                `protobuf:"bytes,10,opt,name=Textline2,proto3" json:"Textline2,omitempty"`                                                 // Index 6
	IntegerValue2   int32                 `protobuf:"zigzag32,11,opt,name=IntegerValue2,proto3" json:"IntegerValue2,omitempty"`                                      // Index 7
	PairMode        HWCText_PairModeE     `protobuf:"varint,12,opt,name=PairMode,proto3,enum=ibeam_rawpanel.HWCText_PairModeE" json:"PairMode,omitempty"`            // Index 8
	Scale           *HWCText_ScaleM       `protobuf:"bytes,13,opt,name=Scale,proto3" json:"Scale,omitempty"`                                                         // Index 9-13
	TextStyling     *HWCText_TextStyle    `protobuf:"bytes,14,opt,name=TextStyling,proto3" json:"TextStyling,omitempty"`                                             // Index 15-17
	Inverted        bool                  `protobuf:"varint,15,opt,name=Inverted,proto3" json:"Inverted,omitempty"`                                                  // Index 18
	PixelColor      *Color                `protobuf:"bytes,16,opt,name=PixelColor,proto3" json:"PixelColor,omitempty"`                                               // Index 19
	BackgroundColor *Color                `protobuf:"bytes,17,opt,name=BackgroundColor,proto3" json:"BackgroundColor,omitempty"`                                     // Index 20
}

func (x *HWCText) Reset() {
	*x = HWCText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_rawpanel_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HWCText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HWCText) ProtoMessage() {}

func (x *HWCText) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_rawpanel_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HWCText.ProtoReflect.Descriptor instead.
func (*HWCText) Descriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{15}
}

func (x *HWCText) GetIntegerValue() int32 {
	if x != nil {
		return x.IntegerValue
	}
	return 0
}

func (x *HWCText) GetFormatting() HWCText_FormattingE {
	if x != nil {
		return x.Formatting
	}
	return HWCText_FMT_INTEGER
}

func (x *HWCText) GetStateIcon() HWCText_StateIconE {
	if x != nil {
		return x.StateIcon
	}
	return HWCText_SI_NONE
}

func (x *HWCText) GetModifierIcon() HWCText_ModifierIconE {
	if x != nil {
		return x.ModifierIcon
	}
	return HWCText_MI_NONE
}

func (x *HWCText) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *HWCText) GetSolidHeaderBar() bool {
	if x != nil {
		return x.SolidHeaderBar
	}
	return false
}

func (x *HWCText) GetTextline1() string {
	if x != nil {
		return x.Textline1
	}
	return ""
}

func (x *HWCText) GetTextline2() string {
	if x != nil {
		return x.Textline2
	}
	return ""
}

func (x *HWCText) GetIntegerValue2() int32 {
	if x != nil {
		return x.IntegerValue2
	}
	return 0
}

func (x *HWCText) GetPairMode() HWCText_PairModeE {
	if x != nil {
		return x.PairMode
	}
	return HWCText_PM_OFF
}

func (x *HWCText) GetScale() *HWCText_ScaleM {
	if x != nil {
		return x.Scale
	}
	return nil
}

func (x *HWCText) GetTextStyling() *HWCText_TextStyle {
	if x != nil {
		return x.TextStyling
	}
	return nil
}

func (x *HWCText) GetInverted() bool {
	if x != nil {
		return x.Inverted
	}
	return false
}

func (x *HWCText) GetPixelColor() *Color {
	if x != nil {
		return x.PixelColor
	}
	return nil
}

func (x *HWCText) GetBackgroundColor() *Color {
	if x != nil {
		return x.BackgroundColor
	}
	return nil
}

// Graphics
type HWCGfx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageType HWCGfx_ImageTypeE `protobuf:"varint,1,opt,name=ImageType,proto3,enum=ibeam_rawpanel.HWCGfx_ImageTypeE" json:"ImageType,omitempty"`
	W         uint32            `protobuf:"varint,2,opt,name=W,proto3" json:"W,omitempty"` // Must always be set (and match size of image in ImageData)
	H         uint32            `protobuf:"varint,3,opt,name=H,proto3" json:"H,omitempty"` // Must always be set (and match size of image in ImageData)
	// TODO: Break this optional parameter out into separate message:
	XYoffset  bool   `protobuf:"varint,4,opt,name=XYoffset,proto3" json:"XYoffset,omitempty"` // Enables whether the X/Y offset is taken into account (default is to center the image)
	X         uint32 `protobuf:"varint,5,opt,name=X,proto3" json:"X,omitempty"`
	Y         uint32 `protobuf:"varint,6,opt,name=Y,proto3" json:"Y,omitempty"`
	ImageData []byte `protobuf:"bytes,16,opt,name=ImageData,proto3" json:"ImageData,omitempty"` //ImgConvert inputConversion = 17;    // Todo. If !=nil, will contain information about input conversion of the Image Data content (PNG / JPG + scaling)
}

func (x *HWCGfx) Reset() {
	*x = HWCGfx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_rawpanel_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HWCGfx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HWCGfx) ProtoMessage() {}

func (x *HWCGfx) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_rawpanel_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HWCGfx.ProtoReflect.Descriptor instead.
func (*HWCGfx) Descriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{16}
}

func (x *HWCGfx) GetImageType() HWCGfx_ImageTypeE {
	if x != nil {
		return x.ImageType
	}
	return HWCGfx_MONO
}

func (x *HWCGfx) GetW() uint32 {
	if x != nil {
		return x.W
	}
	return 0
}

func (x *HWCGfx) GetH() uint32 {
	if x != nil {
		return x.H
	}
	return 0
}

func (x *HWCGfx) GetXYoffset() bool {
	if x != nil {
		return x.XYoffset
	}
	return false
}

func (x *HWCGfx) GetX() uint32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *HWCGfx) GetY() uint32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *HWCGfx) GetImageData() []byte {
	if x != nil {
		return x.ImageData
	}
	return nil
}

// Wrapper for all outgoing messages (Outgoing = from Panel to System)
type OutboundMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowMessage     OutboundMessage_FlowMsg `protobuf:"varint,1,opt,name=FlowMessage,proto3,enum=ibeam_rawpanel.OutboundMessage_FlowMsg" json:"FlowMessage,omitempty"`
	HWCavailability map[uint32]uint32       `protobuf:"bytes,2,rep,name=HWCavailability,proto3" json:"HWCavailability,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //repeated HWCEvent LastKnownValues = 3;    // TODO
	PanelInfo       *PanelInfo              `protobuf:"bytes,4,opt,name=PanelInfo,proto3" json:"PanelInfo,omitempty"`
	PanelTopology   *PanelTopology          `protobuf:"bytes,5,opt,name=PanelTopology,proto3" json:"PanelTopology,omitempty"`
	BurninProfile   *BurninProfile          `protobuf:"bytes,9,opt,name=BurninProfile,proto3" json:"BurninProfile,omitempty"`
	SleepTimeout    *SleepTimeout           `protobuf:"bytes,6,opt,name=SleepTimeout,proto3" json:"SleepTimeout,omitempty"`
	SleepState      *SleepState             `protobuf:"bytes,7,opt,name=SleepState,proto3" json:"SleepState,omitempty"`
	BusStatus       *BusStatus              `protobuf:"bytes,10,opt,name=BusStatus,proto3" json:"BusStatus,omitempty"`
	Events          []*HWCEvent             `protobuf:"bytes,8,rep,name=Events,proto3" json:"Events,omitempty"`
}

func (x *OutboundMessage) Reset() {
	*x = OutboundMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_rawpanel_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutboundMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutboundMessage) ProtoMessage() {}

func (x *OutboundMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_rawpanel_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutboundMessage.ProtoReflect.Descriptor instead.
func (*OutboundMessage) Descriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{17}
}

func (x *OutboundMessage) GetFlowMessage() OutboundMessage_FlowMsg {
	if x != nil {
		return x.FlowMessage
	}
	return OutboundMessage_NONE
}

func (x *OutboundMessage) GetHWCavailability() map[uint32]uint32 {
	if x != nil {
		return x.HWCavailability
	}
	return nil
}

func (x *OutboundMessage) GetPanelInfo() *PanelInfo {
	if x != nil {
		return x.PanelInfo
	}
	return nil
}

func (x *OutboundMessage) GetPanelTopology() *PanelTopology {
	if x != nil {
		return x.PanelTopology
	}
	return nil
}

func (x *OutboundMessage) GetBurninProfile() *BurninProfile {
	if x != nil {
		return x.BurninProfile
	}
	return nil
}

func (x *OutboundMessage) GetSleepTimeout() *SleepTimeout {
	if x != nil {
		return x.SleepTimeout
	}
	return nil
}

func (x *OutboundMessage) GetSleepState() *SleepState {
	if x != nil {
		return x.SleepState
	}
	return nil
}

func (x *OutboundMessage) GetBusStatus() *BusStatus {
	if x != nil {
		return x.BusStatus
	}
	return nil
}

func (x *OutboundMessage) GetEvents() []*HWCEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type SleepState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSleeping bool `protobuf:"varint,1,opt,name=IsSleeping,proto3" json:"IsSleeping,omitempty"`
}

func (x *SleepState) Reset() {
	*x = SleepState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_rawpanel_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SleepState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SleepState) ProtoMessage() {}

func (x *SleepState) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_rawpanel_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SleepState.ProtoReflect.Descriptor instead.
func (*SleepState) Descriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{18}
}

func (x *SleepState) GetIsSleeping() bool {
	if x != nil {
		return x.IsSleeping
	}
	return false
}

type BusStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fault bool `protobuf:"varint,1,opt,name=Fault,proto3" json:"Fault,omitempty"`
}

func (x *BusStatus) Reset() {
	*x = BusStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_rawpanel_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusStatus) ProtoMessage() {}

func (x *BusStatus) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_rawpanel_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusStatus.ProtoReflect.Descriptor instead.
func (*BusStatus) Descriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{19}
}

func (x *BusStatus) GetFault() bool {
	if x != nil {
		return x.Fault
	}
	return false
}

type HWCEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HWCID     uint32 `protobuf:"varint,1,opt,name=HWCID,proto3" json:"HWCID,omitempty"`
	Timestamp uint32 `protobuf:"varint,6,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"` // Systems time in milliseconds the moment of the trigger
	// one of:
	Binary    *BinaryEvent    `protobuf:"bytes,2,opt,name=Binary,proto3" json:"Binary,omitempty"`
	Pulsed    *PulsedEvent    `protobuf:"bytes,3,opt,name=Pulsed,proto3" json:"Pulsed,omitempty"`
	Absolute  *AbsoluteEvent  `protobuf:"bytes,4,opt,name=Absolute,proto3" json:"Absolute,omitempty"`
	Speed     *SpeedEvent     `protobuf:"bytes,5,opt,name=Speed,proto3" json:"Speed,omitempty"`
	RawAnalog *RawAnalogEvent `protobuf:"bytes,7,opt,name=RawAnalog,proto3" json:"RawAnalog,omitempty"`
	SysStat   *SystemStat     `protobuf:"bytes,8,opt,name=SysStat,proto3" json:"SysStat,omitempty"`
}

func (x *HWCEvent) Reset() {
	*x = HWCEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_rawpanel_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HWCEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HWCEvent) ProtoMessage() {}

func (x *HWCEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_rawpanel_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HWCEvent.ProtoReflect.Descriptor instead.
func (*HWCEvent) Descriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{20}
}

func (x *HWCEvent) GetHWCID() uint32 {
	if x != nil {
		return x.HWCID
	}
	return 0
}

func (x *HWCEvent) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *HWCEvent) GetBinary() *BinaryEvent {
	if x != nil {
		return x.Binary
	}
	return nil
}

func (x *HWCEvent) GetPulsed() *PulsedEvent {
	if x != nil {
		return x.Pulsed
	}
	return nil
}

func (x *HWCEvent) GetAbsolute() *AbsoluteEvent {
	if x != nil {
		return x.Absolute
	}
	return nil
}

func (x *HWCEvent) GetSpeed() *SpeedEvent {
	if x != nil {
		return x.Speed
	}
	return nil
}

func (x *HWCEvent) GetRawAnalog() *RawAnalogEvent {
	if x != nil {
		return x.RawAnalog
	}
	return nil
}

func (x *HWCEvent) GetSysStat() *SystemStat {
	if x != nil {
		return x.SysStat
	}
	return nil
}

type BinaryEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pressed bool               `protobuf:"varint,1,opt,name=Pressed,proto3" json:"Pressed,omitempty"`
	Edge    BinaryEvent_EdgeID `protobuf:"varint,2,opt,name=Edge,proto3,enum=ibeam_rawpanel.BinaryEvent_EdgeID" json:"Edge,omitempty"`
}

func (x *BinaryEvent) Reset() {
	*x = BinaryEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_rawpanel_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinaryEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryEvent) ProtoMessage() {}

func (x *BinaryEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_rawpanel_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryEvent.ProtoReflect.Descriptor instead.
func (*BinaryEvent) Descriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{21}
}

func (x *BinaryEvent) GetPressed() bool {
	if x != nil {
		return x.Pressed
	}
	return false
}

func (x *BinaryEvent) GetEdge() BinaryEvent_EdgeID {
	if x != nil {
		return x.Edge
	}
	return BinaryEvent_UNKNOWN
}

type PulsedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"zigzag32,1,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *PulsedEvent) Reset() {
	*x = PulsedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_rawpanel_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PulsedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulsedEvent) ProtoMessage() {}

func (x *PulsedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_rawpanel_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulsedEvent.ProtoReflect.Descriptor instead.
func (*PulsedEvent) Descriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{22}
}

func (x *PulsedEvent) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type AbsoluteEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     uint32 `protobuf:"varint,1,opt,name=Value,proto3" json:"Value,omitempty"`
	PrevValue uint32 `protobuf:"varint,2,opt,name=PrevValue,proto3" json:"PrevValue,omitempty"` // Can hold previously sent value
}

func (x *AbsoluteEvent) Reset() {
	*x = AbsoluteEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_rawpanel_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbsoluteEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbsoluteEvent) ProtoMessage() {}

func (x *AbsoluteEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_rawpanel_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbsoluteEvent.ProtoReflect.Descriptor instead.
func (*AbsoluteEvent) Descriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{23}
}

func (x *AbsoluteEvent) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *AbsoluteEvent) GetPrevValue() uint32 {
	if x != nil {
		return x.PrevValue
	}
	return 0
}

type SpeedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     int32 `protobuf:"zigzag32,1,opt,name=Value,proto3" json:"Value,omitempty"`
	PrevValue int32 `protobuf:"zigzag32,2,opt,name=PrevValue,proto3" json:"PrevValue,omitempty"` // Can hold previously sent value
}

func (x *SpeedEvent) Reset() {
	*x = SpeedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_rawpanel_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedEvent) ProtoMessage() {}

func (x *SpeedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_rawpanel_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedEvent.ProtoReflect.Descriptor instead.
func (*SpeedEvent) Descriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{24}
}

func (x *SpeedEvent) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *SpeedEvent) GetPrevValue() int32 {
	if x != nil {
		return x.PrevValue
	}
	return 0
}

type RawAnalogEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint32 `protobuf:"varint,1,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *RawAnalogEvent) Reset() {
	*x = RawAnalogEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_rawpanel_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawAnalogEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawAnalogEvent) ProtoMessage() {}

func (x *RawAnalogEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_rawpanel_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawAnalogEvent.ProtoReflect.Descriptor instead.
func (*RawAnalogEvent) Descriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{25}
}

func (x *RawAnalogEvent) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type SystemStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CPUUsage uint32  `protobuf:"varint,1,opt,name=CPUUsage,proto3" json:"CPUUsage,omitempty"` // 0..100%
	CPUTemp  float32 `protobuf:"fixed32,2,opt,name=CPUTemp,proto3" json:"CPUTemp,omitempty"`  // degrees Celsius
	ExtTemp  float32 `protobuf:"fixed32,3,opt,name=ExtTemp,proto3" json:"ExtTemp,omitempty"`  // degrees Celsius, external sensor (-100 if not available)
}

func (x *SystemStat) Reset() {
	*x = SystemStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_rawpanel_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemStat) ProtoMessage() {}

func (x *SystemStat) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_rawpanel_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemStat.ProtoReflect.Descriptor instead.
func (*SystemStat) Descriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{26}
}

func (x *SystemStat) GetCPUUsage() uint32 {
	if x != nil {
		return x.CPUUsage
	}
	return 0
}

func (x *SystemStat) GetCPUTemp() float32 {
	if x != nil {
		return x.CPUTemp
	}
	return 0
}

func (x *SystemStat) GetExtTemp() float32 {
	if x != nil {
		return x.ExtTemp
	}
	return 0
}

type PanelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Model           string `protobuf:"bytes,1,opt,name=Model,proto3" json:"Model,omitempty"`
	Serial          string `protobuf:"bytes,2,opt,name=Serial,proto3" json:"Serial,omitempty"`
	Name            string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	SoftwareVersion string `protobuf:"bytes,4,opt,name=SoftwareVersion,proto3" json:"SoftwareVersion,omitempty"`
	Platform        string `protobuf:"bytes,5,opt,name=Platform,proto3" json:"Platform,omitempty"`
}

func (x *PanelInfo) Reset() {
	*x = PanelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_rawpanel_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PanelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PanelInfo) ProtoMessage() {}

func (x *PanelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_rawpanel_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PanelInfo.ProtoReflect.Descriptor instead.
func (*PanelInfo) Descriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{27}
}

func (x *PanelInfo) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *PanelInfo) GetSerial() string {
	if x != nil {
		return x.Serial
	}
	return ""
}

func (x *PanelInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PanelInfo) GetSoftwareVersion() string {
	if x != nil {
		return x.SoftwareVersion
	}
	return ""
}

func (x *PanelInfo) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

type PanelTopology struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Svgbase string `protobuf:"bytes,1,opt,name=Svgbase,proto3" json:"Svgbase,omitempty"`
	Json    string `protobuf:"bytes,2,opt,name=Json,proto3" json:"Json,omitempty"`
}

func (x *PanelTopology) Reset() {
	*x = PanelTopology{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_rawpanel_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PanelTopology) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PanelTopology) ProtoMessage() {}

func (x *PanelTopology) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_rawpanel_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PanelTopology.ProtoReflect.Descriptor instead.
func (*PanelTopology) Descriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{28}
}

func (x *PanelTopology) GetSvgbase() string {
	if x != nil {
		return x.Svgbase
	}
	return ""
}

func (x *PanelTopology) GetJson() string {
	if x != nil {
		return x.Json
	}
	return ""
}

type BurninProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Json string `protobuf:"bytes,1,opt,name=Json,proto3" json:"Json,omitempty"`
}

func (x *BurninProfile) Reset() {
	*x = BurninProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_rawpanel_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BurninProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BurninProfile) ProtoMessage() {}

func (x *BurninProfile) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_rawpanel_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BurninProfile.ProtoReflect.Descriptor instead.
func (*BurninProfile) Descriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{29}
}

func (x *BurninProfile) GetJson() string {
	if x != nil {
		return x.Json
	}
	return ""
}

type HWCText_ScaleM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScaleType HWCText_ScaleM_ScaleTypeE `protobuf:"varint,1,opt,name=ScaleType,proto3,enum=ibeam_rawpanel.HWCText_ScaleM_ScaleTypeE" json:"ScaleType,omitempty"`
	RangeLow  int32                     `protobuf:"zigzag32,2,opt,name=RangeLow,proto3" json:"RangeLow,omitempty"`
	RangeHigh int32                     `protobuf:"zigzag32,3,opt,name=RangeHigh,proto3" json:"RangeHigh,omitempty"`
	LimitLow  int32                     `protobuf:"zigzag32,4,opt,name=LimitLow,proto3" json:"LimitLow,omitempty"`
	LimitHigh int32                     `protobuf:"zigzag32,5,opt,name=LimitHigh,proto3" json:"LimitHigh,omitempty"`
}

func (x *HWCText_ScaleM) Reset() {
	*x = HWCText_ScaleM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_rawpanel_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HWCText_ScaleM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HWCText_ScaleM) ProtoMessage() {}

func (x *HWCText_ScaleM) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_rawpanel_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HWCText_ScaleM.ProtoReflect.Descriptor instead.
func (*HWCText_ScaleM) Descriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{15, 0}
}

func (x *HWCText_ScaleM) GetScaleType() HWCText_ScaleM_ScaleTypeE {
	if x != nil {
		return x.ScaleType
	}
	return HWCText_ScaleM_ST_OFF
}

func (x *HWCText_ScaleM) GetRangeLow() int32 {
	if x != nil {
		return x.RangeLow
	}
	return 0
}

func (x *HWCText_ScaleM) GetRangeHigh() int32 {
	if x != nil {
		return x.RangeHigh
	}
	return 0
}

func (x *HWCText_ScaleM) GetLimitLow() int32 {
	if x != nil {
		return x.LimitLow
	}
	return 0
}

func (x *HWCText_ScaleM) GetLimitHigh() int32 {
	if x != nil {
		return x.LimitHigh
	}
	return 0
}

type HWCText_TextStyle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TitleFont             *HWCText_TextStyle_Font `protobuf:"bytes,1,opt,name=TitleFont,proto3" json:"TitleFont,omitempty"`
	TextFont              *HWCText_TextStyle_Font `protobuf:"bytes,2,opt,name=TextFont,proto3" json:"TextFont,omitempty"`
	FixedWidth            bool                    `protobuf:"varint,3,opt,name=FixedWidth,proto3" json:"FixedWidth,omitempty"`
	TitleBarPadding       uint32                  `protobuf:"varint,4,opt,name=TitleBarPadding,proto3" json:"TitleBarPadding,omitempty"`
	ExtraCharacterSpacing uint32                  `protobuf:"varint,5,opt,name=ExtraCharacterSpacing,proto3" json:"ExtraCharacterSpacing,omitempty"`
	UnformattedFontSize   uint32                  `protobuf:"varint,6,opt,name=UnformattedFontSize,proto3" json:"UnformattedFontSize,omitempty"`
}

func (x *HWCText_TextStyle) Reset() {
	*x = HWCText_TextStyle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_rawpanel_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HWCText_TextStyle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HWCText_TextStyle) ProtoMessage() {}

func (x *HWCText_TextStyle) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_rawpanel_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HWCText_TextStyle.ProtoReflect.Descriptor instead.
func (*HWCText_TextStyle) Descriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{15, 1}
}

func (x *HWCText_TextStyle) GetTitleFont() *HWCText_TextStyle_Font {
	if x != nil {
		return x.TitleFont
	}
	return nil
}

func (x *HWCText_TextStyle) GetTextFont() *HWCText_TextStyle_Font {
	if x != nil {
		return x.TextFont
	}
	return nil
}

func (x *HWCText_TextStyle) GetFixedWidth() bool {
	if x != nil {
		return x.FixedWidth
	}
	return false
}

func (x *HWCText_TextStyle) GetTitleBarPadding() uint32 {
	if x != nil {
		return x.TitleBarPadding
	}
	return 0
}

func (x *HWCText_TextStyle) GetExtraCharacterSpacing() uint32 {
	if x != nil {
		return x.ExtraCharacterSpacing
	}
	return 0
}

func (x *HWCText_TextStyle) GetUnformattedFontSize() uint32 {
	if x != nil {
		return x.UnformattedFontSize
	}
	return 0
}

type HWCText_TextStyle_Font struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FontFace   HWCText_TextStyle_Font_FontFaceE `protobuf:"varint,1,opt,name=FontFace,proto3,enum=ibeam_rawpanel.HWCText_TextStyle_Font_FontFaceE" json:"FontFace,omitempty"`
	TextHeight uint32                           `protobuf:"varint,2,opt,name=TextHeight,proto3" json:"TextHeight,omitempty"`
	TextWidth  uint32                           `protobuf:"varint,3,opt,name=TextWidth,proto3" json:"TextWidth,omitempty"`
}

func (x *HWCText_TextStyle_Font) Reset() {
	*x = HWCText_TextStyle_Font{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_rawpanel_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HWCText_TextStyle_Font) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HWCText_TextStyle_Font) ProtoMessage() {}

func (x *HWCText_TextStyle_Font) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_rawpanel_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HWCText_TextStyle_Font.ProtoReflect.Descriptor instead.
func (*HWCText_TextStyle_Font) Descriptor() ([]byte, []int) {
	return file_ibeam_rawpanel_proto_rawDescGZIP(), []int{15, 1, 0}
}

func (x *HWCText_TextStyle_Font) GetFontFace() HWCText_TextStyle_Font_FontFaceE {
	if x != nil {
		return x.FontFace
	}
	return HWCText_TextStyle_Font_ST_DEFAULT
}

func (x *HWCText_TextStyle_Font) GetTextHeight() uint32 {
	if x != nil {
		return x.TextHeight
	}
	return 0
}

func (x *HWCText_TextStyle_Font) GetTextWidth() uint32 {
	if x != nil {
		return x.TextWidth
	}
	return 0
}

var File_ibeam_rawpanel_proto protoreflect.FileDescriptor

var file_ibeam_rawpanel_proto_rawDesc = []byte{
	0x0a, 0x14, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x2d, 0x72, 0x61, 0x77, 0x70, 0x61, 0x6e, 0x65, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61,
	0x77, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x22, 0xf1, 0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x46, 0x6c, 0x6f,
	0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x77, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e,
	0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x4d, 0x73, 0x67, 0x52, 0x0b, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x77,
	0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72,
	0x61, 0x77, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x48, 0x57, 0x43, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0x30, 0x0a, 0x07, 0x46, 0x6c, 0x6f, 0x77,
	0x4d, 0x73, 0x67, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x43, 0x4b, 0x10, 0x02,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x41, 0x43, 0x4b, 0x10, 0x03, 0x22, 0xed, 0x05, 0x0a, 0x07, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d,
	0x53, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x54,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x53,
	0x65, 0x6e, 0x64, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x12, 0x34, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x57, 0x43, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x57, 0x43, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x75,
	0x72, 0x6e, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x6c, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x6c, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x4c, 0x45, 0x44, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x4c, 0x45, 0x44, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x61, 0x6b, 0x65, 0x55, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x57, 0x61, 0x6b, 0x65, 0x55, 0x70, 0x12, 0x28, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x46, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x53, 0x6c, 0x65,
	0x65, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x77, 0x70, 0x61, 0x6e, 0x65, 0x6c,
	0x2e, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x0f, 0x53,
	0x65, 0x74, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x50,
	0x0a, 0x13, 0x53, 0x65, 0x74, 0x57, 0x65, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x62,
	0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x77, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x57, 0x65, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x13, 0x53, 0x65, 0x74,
	0x57, 0x65, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x44, 0x0a, 0x0f, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x62, 0x65, 0x61,
	0x6d, 0x5f, 0x72, 0x61, 0x77, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x42, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x0f, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x42, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x4f, 0x0a, 0x11, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x77, 0x70, 0x61, 0x6e,
	0x65, 0x6c, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x52, 0x11, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x4c, 0x6f, 0x61, 0x64, 0x43,
	0x50, 0x55, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d,
	0x5f, 0x72, 0x61, 0x77, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x50,
	0x55, 0x52, 0x07, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x50, 0x55, 0x22, 0x24, 0x0a, 0x0c, 0x53, 0x6c,
	0x65, 0x65, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x2a, 0x0a, 0x0e, 0x57, 0x65, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x36, 0x0a, 0x0a,
	0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x4c,
	0x45, 0x44, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4f, 0x4c, 0x45, 0x44, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x4c, 0x45, 0x44, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x4c, 0x45, 0x44, 0x73, 0x22, 0x31, 0x0a, 0x11, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x53, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x63, 0x22, 0x8d, 0x01, 0x0a, 0x07, 0x4c, 0x6f, 0x61, 0x64,
	0x43, 0x50, 0x55, 0x12, 0x34, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x77, 0x70, 0x61,
	0x6e, 0x65, 0x6c, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x50, 0x55, 0x2e, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x45, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x4c, 0x0a, 0x06, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x45, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x46, 0x46, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x4f, 0x4e, 0x5f, 0x31, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x4e,
	0x5f, 0x32, 0x43, 0x4f, 0x52, 0x45, 0x53, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x4e, 0x5f,
	0x33, 0x43, 0x4f, 0x52, 0x45, 0x53, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x4e, 0x5f, 0x34,
	0x43, 0x4f, 0x52, 0x45, 0x53, 0x10, 0x04, 0x22, 0x84, 0x03, 0x0a, 0x08, 0x48, 0x57, 0x43, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x57, 0x43, 0x49, 0x44, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x48, 0x57, 0x43, 0x49, 0x44, 0x73, 0x12, 0x31, 0x0a, 0x07,
	0x48, 0x57, 0x43, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x77, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x48,
	0x57, 0x43, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x48, 0x57, 0x43, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x34, 0x0a, 0x08, 0x48, 0x57, 0x43, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x77, 0x70, 0x61, 0x6e,
	0x65, 0x6c, 0x2e, 0x48, 0x57, 0x43, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x08, 0x48, 0x57, 0x43,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x48, 0x57, 0x43, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x62, 0x65,
	0x61, 0x6d, 0x5f, 0x72, 0x61, 0x77, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x48, 0x57, 0x43, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x0b, 0x48, 0x57, 0x43, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x48, 0x57, 0x43, 0x54, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61,
	0x77, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x48, 0x57, 0x43, 0x54, 0x65, 0x78, 0x74, 0x52, 0x07,
	0x48, 0x57, 0x43, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x48, 0x57, 0x43, 0x47, 0x66,
	0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f,
	0x72, 0x61, 0x77, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x48, 0x57, 0x43, 0x47, 0x66, 0x78, 0x52,
	0x06, 0x48, 0x57, 0x43, 0x47, 0x66, 0x78, 0x12, 0x55, 0x0a, 0x13, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x52, 0x61, 0x77, 0x41, 0x44, 0x43, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x77,
	0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x61, 0x77,
	0x41, 0x44, 0x43, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x13, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x52, 0x61, 0x77, 0x41, 0x44, 0x43, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x2f,
	0x0a, 0x13, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x61, 0x77, 0x41, 0x44, 0x43, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22,
	0xb3, 0x01, 0x0a, 0x07, 0x48, 0x57, 0x43, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x69, 0x62, 0x65,
	0x61, 0x6d, 0x5f, 0x72, 0x61, 0x77, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x48, 0x57, 0x43, 0x4d,
	0x6f, 0x64, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x42, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0x4e, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x12,
	0x07, 0x0a, 0x03, 0x4f, 0x46, 0x46, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x4e, 0x5f, 0x59,
	0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10,
	0x03, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x49, 0x4d,
	0x4d, 0x45, 0x44, 0x10, 0x05, 0x22, 0xcd, 0x01, 0x0a, 0x0b, 0x48, 0x57, 0x43, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x77, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x48,
	0x57, 0x43, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x52, 0x0e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x53, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x53, 0x54, 0x52, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53,
	0x54, 0x45, 0x50, 0x53, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x56, 0x55, 0x10, 0x04, 0x12, 0x09,
	0x0a, 0x05, 0x46, 0x41, 0x44, 0x45, 0x52, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x55, 0x5a,
	0x5a, 0x45, 0x52, 0x10, 0x06, 0x22, 0x7c, 0x0a, 0x08, 0x48, 0x57, 0x43, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x34, 0x0a, 0x08, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x47, 0x42, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x77, 0x70,
	0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x47, 0x42, 0x52, 0x08, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x47, 0x42, 0x12, 0x3a, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x62,
	0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x77, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0a, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0x79, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x08,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x47, 0x42, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x77, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x47, 0x42, 0x52, 0x08, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52,
	0x47, 0x42, 0x12, 0x3a, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72,
	0x61, 0x77, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x0a, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x46,
	0x0a, 0x08, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x47, 0x42, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x52, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x47, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x47, 0x72, 0x65,
	0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x42, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x42, 0x6c, 0x75, 0x65, 0x22, 0x87, 0x02, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x37, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x77,
	0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xbf,
	0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x46, 0x46, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x57, 0x48, 0x49, 0x54, 0x45, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x41,
	0x52, 0x4d, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x08, 0x0a,
	0x04, 0x52, 0x4f, 0x53, 0x45, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x49, 0x4e, 0x4b, 0x10,
	0x06, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x52, 0x50, 0x4c, 0x45, 0x10, 0x07, 0x12, 0x09, 0x0a,
	0x05, 0x41, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x59, 0x45, 0x4c, 0x4c,
	0x4f, 0x57, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x41, 0x52, 0x4b, 0x42, 0x4c, 0x55, 0x45,
	0x10, 0x0a, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x0b, 0x12, 0x07, 0x0a, 0x03,
	0x49, 0x43, 0x45, 0x10, 0x0c, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x59, 0x41, 0x4e, 0x10, 0x0d, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x50, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x0e, 0x12, 0x09, 0x0a, 0x05, 0x47,
	0x52, 0x45, 0x45, 0x4e, 0x10, 0x0f, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x49, 0x4e, 0x54, 0x10, 0x10,
	0x22, 0xc0, 0x10, 0x0a, 0x07, 0x48, 0x57, 0x43, 0x54, 0x65, 0x78, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x43, 0x0a, 0x0a, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x77,
	0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x48, 0x57, 0x43, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x52, 0x0a, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x40, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x63,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d,
	0x5f, 0x72, 0x61, 0x77, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x48, 0x57, 0x43, 0x54, 0x65, 0x78,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x45, 0x52, 0x09, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x77, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x48,
	0x57, 0x43, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x49,
	0x63, 0x6f, 0x6e, 0x45, 0x52, 0x0c, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x49, 0x63,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x6f, 0x6c, 0x69,
	0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x61, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x53, 0x6f, 0x6c, 0x69, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x61, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x54, 0x65, 0x78, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x31, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x65, 0x78, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x31, 0x12, 0x1c,
	0x0a, 0x09, 0x54, 0x65, 0x78, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x54, 0x65, 0x78, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x32, 0x12, 0x24, 0x0a, 0x0d,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x32, 0x12, 0x3d, 0x0a, 0x08, 0x50, 0x61, 0x69, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x77,
	0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x48, 0x57, 0x43, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x50, 0x61,
	0x69, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x52, 0x08, 0x50, 0x61, 0x69, 0x72, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x34, 0x0a, 0x05, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x77, 0x70, 0x61, 0x6e, 0x65,
	0x6c, 0x2e, 0x48, 0x57, 0x43, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x4d,
	0x52, 0x05, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x54, 0x65, 0x78, 0x74, 0x53,
	0x74, 0x79, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69,
	0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x77, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x48, 0x57,
	0x43, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52,
	0x0b, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x50, 0x69, 0x78, 0x65,
	0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69,
	0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x77, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x52, 0x0a, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x3f, 0x0a, 0x0f, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d,
	0x5f, 0x72, 0x61, 0x77, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52,
	0x0f, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x1a, 0x99, 0x02, 0x0a, 0x06, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x4d, 0x12, 0x47, 0x0a, 0x09, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29,
	0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x77, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e,
	0x48, 0x57, 0x43, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x4d, 0x2e, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x52, 0x09, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x77,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x77,
	0x12, 0x1c, 0x0a, 0x09, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x69, 0x67, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x09, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x69, 0x67, 0x68, 0x12, 0x1a,
	0x0a, 0x08, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x08, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x48, 0x69, 0x67, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x48, 0x69, 0x67, 0x68, 0x22, 0x52, 0x0a, 0x0a, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x5f, 0x4f, 0x46, 0x46,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x4e, 0x47, 0x54,
	0x48, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x52, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x5f,
	0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x42, 0x41, 0x52, 0x10, 0x03, 0x1a, 0x93, 0x04, 0x0a,
	0x09, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x46, 0x6f, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x77, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x48,
	0x57, 0x43, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x2e, 0x46, 0x6f, 0x6e, 0x74, 0x52, 0x09, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x46, 0x6f, 0x6e, 0x74,
	0x12, 0x42, 0x0a, 0x08, 0x54, 0x65, 0x78, 0x74, 0x46, 0x6f, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x77, 0x70, 0x61,
	0x6e, 0x65, 0x6c, 0x2e, 0x48, 0x57, 0x43, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x2e, 0x46, 0x6f, 0x6e, 0x74, 0x52, 0x08, 0x54, 0x65, 0x78, 0x74,
	0x46, 0x6f, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x69, 0x78, 0x65, 0x64, 0x57, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x46, 0x69, 0x78, 0x65, 0x64, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x61, 0x72,
	0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x42, 0x61, 0x72, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x34,
	0x0a, 0x15, 0x45, 0x78, 0x74, 0x72, 0x61, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x53, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x70, 0x61,
	0x63, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x13, 0x55, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x74, 0x65, 0x64, 0x46, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x55, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x46, 0x6f,
	0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x1a, 0xc9, 0x01, 0x0a, 0x04, 0x46, 0x6f, 0x6e, 0x74, 0x12,
	0x4c, 0x0a, 0x08, 0x46, 0x6f, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x30, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x77, 0x70, 0x61, 0x6e,
	0x65, 0x6c, 0x2e, 0x48, 0x57, 0x43, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x2e, 0x46, 0x6f, 0x6e, 0x74, 0x2e, 0x46, 0x6f, 0x6e, 0x74, 0x46, 0x61,
	0x63, 0x65, 0x45, 0x52, 0x08, 0x46, 0x6f, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x54, 0x65, 0x78, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x54, 0x65, 0x78, 0x74, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x54, 0x65, 0x78, 0x74, 0x57, 0x69, 0x64, 0x74, 0x68, 0x22, 0x35, 0x0a, 0x09, 0x46,
	0x6f, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x65, 0x45, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x5f, 0x44,
	0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x5f, 0x42,
	0x4f, 0x4c, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x5f, 0x54, 0x49, 0x4e, 0x59,
	0x10, 0x02, 0x22, 0xf4, 0x01, 0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x45, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x4d, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45,
	0x52, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x4d, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54,
	0x5f, 0x32, 0x44, 0x45, 0x5a, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x4d, 0x54, 0x5f, 0x50,
	0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46,
	0x4d, 0x54, 0x5f, 0x44, 0x42, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x4d, 0x54, 0x5f, 0x46,
	0x52, 0x41, 0x4d, 0x45, 0x53, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x4d, 0x54, 0x5f, 0x4f,
	0x4e, 0x45, 0x4f, 0x56, 0x45, 0x52, 0x58, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x4d, 0x54,
	0x5f, 0x4b, 0x45, 0x4c, 0x56, 0x49, 0x4e, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x4d, 0x54,
	0x5f, 0x48, 0x49, 0x44, 0x45, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x4d, 0x54, 0x5f, 0x46,
	0x4c, 0x4f, 0x41, 0x54, 0x5f, 0x58, 0x5f, 0x58, 0x58, 0x58, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f,
	0x46, 0x4d, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x5f, 0x58, 0x58, 0x5f, 0x58, 0x58, 0x10,
	0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x4d, 0x54, 0x5f, 0x4f, 0x4e, 0x45, 0x4c, 0x49, 0x4e, 0x45,
	0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x4d, 0x54, 0x5f, 0x54, 0x57, 0x4f, 0x4c, 0x49, 0x4e,
	0x45, 0x53, 0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x4d, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x41,
	0x54, 0x5f, 0x58, 0x58, 0x58, 0x5f, 0x58, 0x10, 0x0c, 0x22, 0x44, 0x0a, 0x0a, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x45, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x49, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x49, 0x5f, 0x46, 0x49, 0x4e, 0x45, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x49, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x49, 0x5f, 0x4e, 0x4f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x22,
	0x7a, 0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x45,
	0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x49, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x4d, 0x49, 0x5f, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4d,
	0x49, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x49, 0x5f, 0x55,
	0x50, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x49, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x04,
	0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x49, 0x5f, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x10, 0x05, 0x12,
	0x09, 0x0a, 0x05, 0x4d, 0x49, 0x5f, 0x4f, 0x4b, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x49,
	0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x22, 0x66, 0x0a, 0x09, 0x50,
	0x61, 0x69, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x4d, 0x5f, 0x4f,
	0x46, 0x46, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4d, 0x5f, 0x55, 0x4e, 0x4d, 0x41, 0x52,
	0x4b, 0x45, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4d, 0x5f, 0x55, 0x50, 0x50, 0x45,
	0x52, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x44, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4d,
	0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x12, 0x0a, 0x0e, 0x50, 0x4d, 0x5f, 0x42, 0x4f, 0x54, 0x48, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45,
	0x44, 0x10, 0x04, 0x22, 0xef, 0x01, 0x0a, 0x06, 0x48, 0x57, 0x43, 0x47, 0x66, 0x78, 0x12, 0x3f,
	0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x77, 0x70, 0x61, 0x6e,
	0x65, 0x6c, 0x2e, 0x48, 0x57, 0x43, 0x47, 0x66, 0x78, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x45, 0x52, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0c, 0x0a, 0x01, 0x57, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x57, 0x12, 0x0c, 0x0a,
	0x01, 0x48, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x48, 0x12, 0x1a, 0x0a, 0x08, 0x58,
	0x59, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x58,
	0x59, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x58, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x01, 0x58, 0x12, 0x0c, 0x0a, 0x01, 0x59, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x01, 0x59, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x32, 0x0a, 0x0a, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x12,
	0x08, 0x0a, 0x04, 0x4d, 0x4f, 0x4e, 0x4f, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x47, 0x42,
	0x31, 0x36, 0x62, 0x69, 0x74, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x72, 0x61, 0x79, 0x34,
	0x62, 0x69, 0x74, 0x10, 0x02, 0x22, 0xfb, 0x05, 0x0a, 0x0f, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x46, 0x6c, 0x6f,
	0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x77, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e,
	0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x73, 0x67, 0x52, 0x0b, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x5e, 0x0a, 0x0f, 0x48, 0x57, 0x43, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x77, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x4f,
	0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x48,
	0x57, 0x43, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0f, 0x48, 0x57, 0x43, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x09, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f,
	0x72, 0x61, 0x77, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a,
	0x0d, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x77,
	0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x52, 0x0d, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x12, 0x43, 0x0a, 0x0d, 0x42, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x62, 0x65, 0x61,
	0x6d, 0x5f, 0x72, 0x61, 0x77, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x42, 0x75, 0x72, 0x6e, 0x69,
	0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0d, 0x42, 0x75, 0x72, 0x6e, 0x69, 0x6e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x53, 0x6c, 0x65, 0x65, 0x70,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x77, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x53,
	0x6c, 0x65, 0x65, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x0c, 0x53, 0x6c, 0x65,
	0x65, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x53, 0x6c, 0x65,
	0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x77, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x53,
	0x6c, 0x65, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x53, 0x6c, 0x65, 0x65, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x42, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d,
	0x5f, 0x72, 0x61, 0x77, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x42, 0x75, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x09, 0x42, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30,
	0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x77, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e,
	0x48, 0x57, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x1a, 0x42, 0x0a, 0x14, 0x48, 0x57, 0x43, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x4d, 0x0a, 0x07, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x73, 0x67, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x41, 0x43, 0x4b, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x53, 0x59, 0x10, 0x04, 0x12,
	0x07, 0x0a, 0x03, 0x52, 0x44, 0x59, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x45, 0x4c, 0x4c,
	0x4f, 0x10, 0x64, 0x22, 0x2c, 0x0a, 0x0a, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x69, 0x6e,
	0x67, 0x22, 0x21, 0x0a, 0x09, 0x42, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x22, 0x89, 0x03, 0x0a, 0x08, 0x48, 0x57, 0x43, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x48, 0x57, 0x43, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x48, 0x57, 0x43, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x33, 0x0a, 0x06, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61,
	0x77, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x06, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x06, 0x50, 0x75,
	0x6c, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x62, 0x65,
	0x61, 0x6d, 0x5f, 0x72, 0x61, 0x77, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x50, 0x75, 0x6c, 0x73,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x64, 0x12,
	0x39, 0x0a, 0x08, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x77, 0x70, 0x61, 0x6e,
	0x65, 0x6c, 0x2e, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x08, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x62, 0x65, 0x61,
	0x6d, 0x5f, 0x72, 0x61, 0x77, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x52, 0x61, 0x77, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x77, 0x70, 0x61, 0x6e, 0x65, 0x6c,
	0x2e, 0x52, 0x61, 0x77, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x09, 0x52, 0x61, 0x77, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x34, 0x0a, 0x07, 0x53, 0x79,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x62,
	0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x77, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x52, 0x07, 0x53, 0x79, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x22, 0xad, 0x01, 0x0a, 0x0b, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x50, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x45, 0x64,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d,
	0x5f, 0x72, 0x61, 0x77, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x49, 0x44, 0x52, 0x04, 0x45, 0x64,
	0x67, 0x65, 0x22, 0x4c, 0x0a, 0x06, 0x45, 0x64, 0x67, 0x65, 0x49, 0x44, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x4f, 0x50,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x42, 0x4f, 0x54, 0x54, 0x4f, 0x4d, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x49, 0x47, 0x48,
	0x54, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x45, 0x52, 0x10, 0x10,
	0x22, 0x23, 0x0a, 0x0b, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x43, 0x0a, 0x0d, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x50, 0x72, 0x65, 0x76, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x50, 0x72, 0x65, 0x76, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x40, 0x0a, 0x0a, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x50, 0x72, 0x65, 0x76, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x09, 0x50, 0x72, 0x65, 0x76, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x26, 0x0a, 0x0e,
	0x52, 0x61, 0x77, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x5c, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x50, 0x55, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x43, 0x50, 0x55, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x43, 0x50, 0x55, 0x54, 0x65, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x07, 0x43, 0x50, 0x55, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x78, 0x74, 0x54,
	0x65, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x45, 0x78, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x22, 0x93, 0x01, 0x0a, 0x09, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x6f, 0x66,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x3d, 0x0a, 0x0d, 0x50, 0x61, 0x6e, 0x65,
	0x6c, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x76, 0x67,
	0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x76, 0x67, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x23, 0x0a, 0x0d, 0x42, 0x75, 0x72, 0x6e, 0x69,
	0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4a, 0x73, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4a, 0x73, 0x6f, 0x6e, 0x42, 0x21, 0x5a, 0x1f,
	0x2e, 0x2f, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x77, 0x70, 0x61, 0x6e, 0x65, 0x6c,
	0x3b, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61, 0x77, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ibeam_rawpanel_proto_rawDescOnce sync.Once
	file_ibeam_rawpanel_proto_rawDescData = file_ibeam_rawpanel_proto_rawDesc
)

func file_ibeam_rawpanel_proto_rawDescGZIP() []byte {
	file_ibeam_rawpanel_proto_rawDescOnce.Do(func() {
		file_ibeam_rawpanel_proto_rawDescData = protoimpl.X.CompressGZIP(file_ibeam_rawpanel_proto_rawDescData)
	})
	return file_ibeam_rawpanel_proto_rawDescData
}

var file_ibeam_rawpanel_proto_enumTypes = make([]protoimpl.EnumInfo, 14)
var file_ibeam_rawpanel_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_ibeam_rawpanel_proto_goTypes = []interface{}{
	(InboundMessage_FlowMsg)(0),           // 0: ibeam_rawpanel.InboundMessage.FlowMsg
	(LoadCPU_LevelE)(0),                   // 1: ibeam_rawpanel.LoadCPU.LevelE
	(HWCMode_StateE)(0),                   // 2: ibeam_rawpanel.HWCMode.StateE
	(HWCExtended_InterpretationE)(0),      // 3: ibeam_rawpanel.HWCExtended.InterpretationE
	(ColorIndex_Colors)(0),                // 4: ibeam_rawpanel.ColorIndex.Colors
	(HWCText_FormattingE)(0),              // 5: ibeam_rawpanel.HWCText.FormattingE
	(HWCText_StateIconE)(0),               // 6: ibeam_rawpanel.HWCText.StateIconE
	(HWCText_ModifierIconE)(0),            // 7: ibeam_rawpanel.HWCText.ModifierIconE
	(HWCText_PairModeE)(0),                // 8: ibeam_rawpanel.HWCText.PairModeE
	(HWCText_ScaleM_ScaleTypeE)(0),        // 9: ibeam_rawpanel.HWCText.ScaleM.ScaleTypeE
	(HWCText_TextStyle_Font_FontFaceE)(0), // 10: ibeam_rawpanel.HWCText.TextStyle.Font.FontFaceE
	(HWCGfx_ImageTypeE)(0),                // 11: ibeam_rawpanel.HWCGfx.ImageTypeE
	(OutboundMessage_FlowMsg)(0),          // 12: ibeam_rawpanel.OutboundMessage.FlowMsg
	(BinaryEvent_EdgeID)(0),               // 13: ibeam_rawpanel.BinaryEvent.EdgeID
	(*InboundMessage)(nil),                // 14: ibeam_rawpanel.InboundMessage
	(*Command)(nil),                       // 15: ibeam_rawpanel.Command
	(*SleepTimeout)(nil),                  // 16: ibeam_rawpanel.SleepTimeout
	(*WebserverState)(nil),                // 17: ibeam_rawpanel.WebserverState
	(*Brightness)(nil),                    // 18: ibeam_rawpanel.Brightness
	(*PublishSystemStat)(nil),             // 19: ibeam_rawpanel.PublishSystemStat
	(*LoadCPU)(nil),                       // 20: ibeam_rawpanel.LoadCPU
	(*HWCState)(nil),                      // 21: ibeam_rawpanel.HWCState
	(*PublishRawADCValues)(nil),           // 22: ibeam_rawpanel.PublishRawADCValues
	(*HWCMode)(nil),                       // 23: ibeam_rawpanel.HWCMode
	(*HWCExtended)(nil),                   // 24: ibeam_rawpanel.HWCExtended
	(*HWCColor)(nil),                      // 25: ibeam_rawpanel.HWCColor
	(*Color)(nil),                         // 26: ibeam_rawpanel.Color
	(*ColorRGB)(nil),                      // 27: ibeam_rawpanel.ColorRGB
	(*ColorIndex)(nil),                    // 28: ibeam_rawpanel.ColorIndex
	(*HWCText)(nil),                       // 29: ibeam_rawpanel.HWCText
	(*HWCGfx)(nil),                        // 30: ibeam_rawpanel.HWCGfx
	(*OutboundMessage)(nil),               // 31: ibeam_rawpanel.OutboundMessage
	(*SleepState)(nil),                    // 32: ibeam_rawpanel.SleepState
	(*BusStatus)(nil),                     // 33: ibeam_rawpanel.BusStatus
	(*HWCEvent)(nil),                      // 34: ibeam_rawpanel.HWCEvent
	(*BinaryEvent)(nil),                   // 35: ibeam_rawpanel.BinaryEvent
	(*PulsedEvent)(nil),                   // 36: ibeam_rawpanel.PulsedEvent
	(*AbsoluteEvent)(nil),                 // 37: ibeam_rawpanel.AbsoluteEvent
	(*SpeedEvent)(nil),                    // 38: ibeam_rawpanel.SpeedEvent
	(*RawAnalogEvent)(nil),                // 39: ibeam_rawpanel.RawAnalogEvent
	(*SystemStat)(nil),                    // 40: ibeam_rawpanel.SystemStat
	(*PanelInfo)(nil),                     // 41: ibeam_rawpanel.PanelInfo
	(*PanelTopology)(nil),                 // 42: ibeam_rawpanel.PanelTopology
	(*BurninProfile)(nil),                 // 43: ibeam_rawpanel.BurninProfile
	(*HWCText_ScaleM)(nil),                // 44: ibeam_rawpanel.HWCText.ScaleM
	(*HWCText_TextStyle)(nil),             // 45: ibeam_rawpanel.HWCText.TextStyle
	(*HWCText_TextStyle_Font)(nil),        // 46: ibeam_rawpanel.HWCText.TextStyle.Font
	nil,                                   // 47: ibeam_rawpanel.OutboundMessage.HWCavailabilityEntry
}
var file_ibeam_rawpanel_proto_depIdxs = []int32{
	0,  // 0: ibeam_rawpanel.InboundMessage.FlowMessage:type_name -> ibeam_rawpanel.InboundMessage.FlowMsg
	15, // 1: ibeam_rawpanel.InboundMessage.Command:type_name -> ibeam_rawpanel.Command
	21, // 2: ibeam_rawpanel.InboundMessage.States:type_name -> ibeam_rawpanel.HWCState
	16, // 3: ibeam_rawpanel.Command.SetSleepTimeout:type_name -> ibeam_rawpanel.SleepTimeout
	17, // 4: ibeam_rawpanel.Command.SetWebserverEnabled:type_name -> ibeam_rawpanel.WebserverState
	18, // 5: ibeam_rawpanel.Command.PanelBrightness:type_name -> ibeam_rawpanel.Brightness
	19, // 6: ibeam_rawpanel.Command.PublishSystemStat:type_name -> ibeam_rawpanel.PublishSystemStat
	20, // 7: ibeam_rawpanel.Command.LoadCPU:type_name -> ibeam_rawpanel.LoadCPU
	1,  // 8: ibeam_rawpanel.LoadCPU.Level:type_name -> ibeam_rawpanel.LoadCPU.LevelE
	23, // 9: ibeam_rawpanel.HWCState.HWCMode:type_name -> ibeam_rawpanel.HWCMode
	25, // 10: ibeam_rawpanel.HWCState.HWCColor:type_name -> ibeam_rawpanel.HWCColor
	24, // 11: ibeam_rawpanel.HWCState.HWCExtended:type_name -> ibeam_rawpanel.HWCExtended
	29, // 12: ibeam_rawpanel.HWCState.HWCText:type_name -> ibeam_rawpanel.HWCText
	30, // 13: ibeam_rawpanel.HWCState.HWCGfx:type_name -> ibeam_rawpanel.HWCGfx
	22, // 14: ibeam_rawpanel.HWCState.PublishRawADCValues:type_name -> ibeam_rawpanel.PublishRawADCValues
	2,  // 15: ibeam_rawpanel.HWCMode.State:type_name -> ibeam_rawpanel.HWCMode.StateE
	3,  // 16: ibeam_rawpanel.HWCExtended.Interpretation:type_name -> ibeam_rawpanel.HWCExtended.InterpretationE
	27, // 17: ibeam_rawpanel.HWCColor.ColorRGB:type_name -> ibeam_rawpanel.ColorRGB
	28, // 18: ibeam_rawpanel.HWCColor.ColorIndex:type_name -> ibeam_rawpanel.ColorIndex
	27, // 19: ibeam_rawpanel.Color.ColorRGB:type_name -> ibeam_rawpanel.ColorRGB
	28, // 20: ibeam_rawpanel.Color.ColorIndex:type_name -> ibeam_rawpanel.ColorIndex
	4,  // 21: ibeam_rawpanel.ColorIndex.Index:type_name -> ibeam_rawpanel.ColorIndex.Colors
	5,  // 22: ibeam_rawpanel.HWCText.Formatting:type_name -> ibeam_rawpanel.HWCText.FormattingE
	6,  // 23: ibeam_rawpanel.HWCText.StateIcon:type_name -> ibeam_rawpanel.HWCText.StateIconE
	7,  // 24: ibeam_rawpanel.HWCText.ModifierIcon:type_name -> ibeam_rawpanel.HWCText.ModifierIconE
	8,  // 25: ibeam_rawpanel.HWCText.PairMode:type_name -> ibeam_rawpanel.HWCText.PairModeE
	44, // 26: ibeam_rawpanel.HWCText.Scale:type_name -> ibeam_rawpanel.HWCText.ScaleM
	45, // 27: ibeam_rawpanel.HWCText.TextStyling:type_name -> ibeam_rawpanel.HWCText.TextStyle
	26, // 28: ibeam_rawpanel.HWCText.PixelColor:type_name -> ibeam_rawpanel.Color
	26, // 29: ibeam_rawpanel.HWCText.BackgroundColor:type_name -> ibeam_rawpanel.Color
	11, // 30: ibeam_rawpanel.HWCGfx.ImageType:type_name -> ibeam_rawpanel.HWCGfx.ImageTypeE
	12, // 31: ibeam_rawpanel.OutboundMessage.FlowMessage:type_name -> ibeam_rawpanel.OutboundMessage.FlowMsg
	47, // 32: ibeam_rawpanel.OutboundMessage.HWCavailability:type_name -> ibeam_rawpanel.OutboundMessage.HWCavailabilityEntry
	41, // 33: ibeam_rawpanel.OutboundMessage.PanelInfo:type_name -> ibeam_rawpanel.PanelInfo
	42, // 34: ibeam_rawpanel.OutboundMessage.PanelTopology:type_name -> ibeam_rawpanel.PanelTopology
	43, // 35: ibeam_rawpanel.OutboundMessage.BurninProfile:type_name -> ibeam_rawpanel.BurninProfile
	16, // 36: ibeam_rawpanel.OutboundMessage.SleepTimeout:type_name -> ibeam_rawpanel.SleepTimeout
	32, // 37: ibeam_rawpanel.OutboundMessage.SleepState:type_name -> ibeam_rawpanel.SleepState
	33, // 38: ibeam_rawpanel.OutboundMessage.BusStatus:type_name -> ibeam_rawpanel.BusStatus
	34, // 39: ibeam_rawpanel.OutboundMessage.Events:type_name -> ibeam_rawpanel.HWCEvent
	35, // 40: ibeam_rawpanel.HWCEvent.Binary:type_name -> ibeam_rawpanel.BinaryEvent
	36, // 41: ibeam_rawpanel.HWCEvent.Pulsed:type_name -> ibeam_rawpanel.PulsedEvent
	37, // 42: ibeam_rawpanel.HWCEvent.Absolute:type_name -> ibeam_rawpanel.AbsoluteEvent
	38, // 43: ibeam_rawpanel.HWCEvent.Speed:type_name -> ibeam_rawpanel.SpeedEvent
	39, // 44: ibeam_rawpanel.HWCEvent.RawAnalog:type_name -> ibeam_rawpanel.RawAnalogEvent
	40, // 45: ibeam_rawpanel.HWCEvent.SysStat:type_name -> ibeam_rawpanel.SystemStat
	13, // 46: ibeam_rawpanel.BinaryEvent.Edge:type_name -> ibeam_rawpanel.BinaryEvent.EdgeID
	9,  // 47: ibeam_rawpanel.HWCText.ScaleM.ScaleType:type_name -> ibeam_rawpanel.HWCText.ScaleM.ScaleTypeE
	46, // 48: ibeam_rawpanel.HWCText.TextStyle.TitleFont:type_name -> ibeam_rawpanel.HWCText.TextStyle.Font
	46, // 49: ibeam_rawpanel.HWCText.TextStyle.TextFont:type_name -> ibeam_rawpanel.HWCText.TextStyle.Font
	10, // 50: ibeam_rawpanel.HWCText.TextStyle.Font.FontFace:type_name -> ibeam_rawpanel.HWCText.TextStyle.Font.FontFaceE
	51, // [51:51] is the sub-list for method output_type
	51, // [51:51] is the sub-list for method input_type
	51, // [51:51] is the sub-list for extension type_name
	51, // [51:51] is the sub-list for extension extendee
	0,  // [0:51] is the sub-list for field type_name
}

func init() { file_ibeam_rawpanel_proto_init() }
func file_ibeam_rawpanel_proto_init() {
	if File_ibeam_rawpanel_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ibeam_rawpanel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InboundMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_rawpanel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_rawpanel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SleepTimeout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_rawpanel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebserverState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_rawpanel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Brightness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_rawpanel_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishSystemStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_rawpanel_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadCPU); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_rawpanel_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HWCState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_rawpanel_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishRawADCValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_rawpanel_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HWCMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_rawpanel_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HWCExtended); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_rawpanel_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HWCColor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_rawpanel_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Color); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_rawpanel_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColorRGB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_rawpanel_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColorIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_rawpanel_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HWCText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_rawpanel_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HWCGfx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_rawpanel_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutboundMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_rawpanel_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SleepState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_rawpanel_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_rawpanel_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HWCEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_rawpanel_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinaryEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_rawpanel_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PulsedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_rawpanel_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbsoluteEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_rawpanel_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_rawpanel_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawAnalogEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_rawpanel_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_rawpanel_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PanelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_rawpanel_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PanelTopology); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_rawpanel_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BurninProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_rawpanel_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HWCText_ScaleM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_rawpanel_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HWCText_TextStyle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_rawpanel_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HWCText_TextStyle_Font); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ibeam_rawpanel_proto_rawDesc,
			NumEnums:      14,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ibeam_rawpanel_proto_goTypes,
		DependencyIndexes: file_ibeam_rawpanel_proto_depIdxs,
		EnumInfos:         file_ibeam_rawpanel_proto_enumTypes,
		MessageInfos:      file_ibeam_rawpanel_proto_msgTypes,
	}.Build()
	File_ibeam_rawpanel_proto = out.File
	file_ibeam_rawpanel_proto_rawDesc = nil
	file_ibeam_rawpanel_proto_goTypes = nil
	file_ibeam_rawpanel_proto_depIdxs = nil
}
